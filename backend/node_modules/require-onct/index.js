const Module = require('module')
const path = require('path')
const fs = require('fs')

function register() {
  const resolutionsPath = getFirstExistingPath(
    [
      path.join(__dirname, '../resolutions.json'),
      path.join(path.dirname(module.parent.filename), 'resolutions.json'),
      path.join(path.dirname(module.parent.filename), '..', 'resolutions.json'),
    ]
  )


  if (fs.existsSync(resolutionsPath)) {
    const resolutionsFile = fs.readFileSync(resolutionsPath)
    const resolutionsDir = path.dirname(resolutionsPath)
    try {
      let resolutions = JSON.parse(resolutionsFile)
      resolutions = mapValues(resolutions, (key, value) => {
        if (typeof value === 'boolean') {
          return require.resolve(value)
        }
        const newPath = path.join(resolutionsDir, value)
        if (fs.existsSync(newPath)) {
          return newPath
        }
        return value
      })


      const originalRequire = Module.prototype.require
      Module.prototype.require = function(p) {
        if (resolutions[p]) {
          p = resolutions[p]
        }
        return originalRequire.apply(this, [p])
      }
    } catch (e) {
      // ignore
    }
  }
}

register()


function mapValues(obj, cb) {
  const newObj = {}
  Object.entries(obj).forEach(([key, value]) => {
    newObj[key] = cb(key, value)
  })
  return newObj
}

function getFirstExistingPath(paths) {
  for (const p of paths) {
    if (fs.existsSync(p)) {
      return p
    }
  }

  return null
}
