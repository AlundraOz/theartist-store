import { ScalarTypeGeneratorBase } from '../generator';
import { IGQLType, IGQLField } from '../../datamodel/model';
import { GraphQLList, GraphQLType, GraphQLScalarType, GraphQLNonNull } from "graphql/type";
export declare abstract class TypeIdentifiers {
    static string: string;
    static integer: string;
    static float: string;
    static boolean: string;
    static long: string;
    static dateTime: string;
    static id: string;
    static uuid: string;
    static json: string;
}
export default class ScalarTypeGenerator extends ScalarTypeGeneratorBase {
    getTypeName(input: string | IGQLType, args: {}): string;
    isScalarField(field: IGQLField): boolean;
    mapToScalarFieldType(field: IGQLField): GraphQLScalarType | GraphQLList<GraphQLNonNull<GraphQLScalarType>> | GraphQLNonNull<GraphQLScalarType | GraphQLList<GraphQLNonNull<GraphQLScalarType>>>;
    mapToScalarFieldTypeForInput(field: IGQLField): GraphQLScalarType | GraphQLList<GraphQLNonNull<GraphQLScalarType>> | GraphQLNonNull<GraphQLScalarType | GraphQLList<GraphQLNonNull<GraphQLScalarType>>>;
    mapToScalarFieldTypeForceRequired(field: IGQLField): GraphQLNonNull<GraphQLScalarType | GraphQLList<GraphQLNonNull<GraphQLScalarType>>>;
    mapToScalarFieldTypeForceOptional(field: IGQLField): GraphQLScalarType | GraphQLList<GraphQLNonNull<GraphQLScalarType>>;
    /**
     * This method intentionally ignores the required flag for lists,
     * as we generate some relation fields without the required flag.
     * @param field
     * @param type
     */
    wraphWithModifiers<T extends GraphQLType>(field: IGQLField, type: T): T | GraphQLList<GraphQLNonNull<T>> | GraphQLNonNull<T>;
    wrapList<T extends GraphQLType>(type: T): GraphQLList<GraphQLNonNull<T>>;
    requiredIf<T extends GraphQLType>(required: boolean, type: T): GraphQLNonNull<T> | T;
    protected generateInternal(input: string | IGQLType, args?: {}): any;
}
