import { IGenerators, ModelInputObjectTypeGenerator } from '../../generator';
import { IGQLType, IGQLField } from '../../../datamodel/model';
import { GraphQLObjectType, GraphQLList, GraphQLInputObjectType } from "graphql/type";
export default class ModelCreateInputGenerator extends ModelInputObjectTypeGenerator {
    /**
     * Generates an create model input field for a relational type, handling the four cases many/one and with/without related type.
     * @param model
     * @param field
     * @param generators
     */
    static generateRelationFieldForInputType(model: IGQLType, field: IGQLField, generators: IGenerators): GraphQLInputObjectType | import("graphql/type/definition").GraphQLNonNull<GraphQLInputObjectType>;
    static generateScalarFieldTypeForInputType(model: IGQLType, field: IGQLField, generators: IGenerators): GraphQLObjectType | import("graphql/type/definition").GraphQLScalarType | import("graphql/type/definition").GraphQLInterfaceType | import("graphql/type/definition").GraphQLUnionType | import("graphql/type/definition").GraphQLEnumType | GraphQLInputObjectType | GraphQLList<any> | import("graphql/type/definition").GraphQLNonNull<any> | null;
    wouldBeEmpty(model: IGQLType, args: {}): boolean;
    getTypeName(input: IGQLType, args: {}): string;
    protected generateRelationFieldType(model: IGQLType, args: {}, field: IGQLField): GraphQLInputObjectType | import("graphql/type/definition").GraphQLNonNull<GraphQLInputObjectType>;
    protected generateScalarFieldType(model: IGQLType, args: {}, field: IGQLField): GraphQLObjectType | import("graphql/type/definition").GraphQLScalarType | import("graphql/type/definition").GraphQLInterfaceType | import("graphql/type/definition").GraphQLUnionType | import("graphql/type/definition").GraphQLEnumType | GraphQLInputObjectType | GraphQLList<any> | import("graphql/type/definition").GraphQLNonNull<any> | null;
}
