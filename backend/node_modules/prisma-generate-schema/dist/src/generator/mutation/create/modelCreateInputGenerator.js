"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var generator_1 = require("../../generator");
var ModelCreateInputGenerator = /** @class */ (function (_super) {
    __extends(ModelCreateInputGenerator, _super);
    function ModelCreateInputGenerator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Generates an create model input field for a relational type, handling the four cases many/one and with/without related type.
     * @param model
     * @param field
     * @param generators
     */
    ModelCreateInputGenerator.generateRelationFieldForInputType = function (model, field, generators) {
        if (field.relatedField !== null) {
            var relationInfo = { relatedField: field, relatedType: model, relationName: field.relationName };
            if (field.isList) {
                return generators.scalarTypeGenerator.requiredIf(field.isRequired, generators.modelCreateManyWithoutRelatedInput.generate(field.type, relationInfo));
            }
            else {
                return generators.scalarTypeGenerator.requiredIf(field.isRequired, generators.modelCreateOneWithoutRelatedInput.generate(field.type, relationInfo));
            }
        }
        else {
            var relationInfo = { relatedField: field, relatedType: model, relationName: null };
            if (field.isList) {
                return generators.scalarTypeGenerator.requiredIf(field.isRequired, generators.modelCreateManyInput.generate(field.type, relationInfo));
            }
            else {
                return generators.scalarTypeGenerator.requiredIf(field.isRequired, generators.modelCreateOneInput.generate(field.type, relationInfo));
            }
        }
    };
    ModelCreateInputGenerator.generateScalarFieldTypeForInputType = function (model, field, generators) {
        if (generator_1.TypeFromModelGenerator.reservedFields.includes(field.name)) {
            return null;
        }
        else {
            if (field.isList) {
                return generators.scalarListCreateInput.generate(model, field);
            }
            else {
                return generators.scalarTypeGenerator.mapToScalarFieldTypeForInput(field);
            }
        }
    };
    ModelCreateInputGenerator.prototype.wouldBeEmpty = function (model, args) {
        return !generator_1.TypeFromModelGenerator.hasFieldsExcept.apply(generator_1.TypeFromModelGenerator, [model.fields].concat(generator_1.TypeFromModelGenerator.reservedFields));
    };
    ModelCreateInputGenerator.prototype.getTypeName = function (input, args) {
        return input.name + "CreateInput";
    };
    ModelCreateInputGenerator.prototype.generateRelationFieldType = function (model, args, field) {
        return ModelCreateInputGenerator.generateRelationFieldForInputType(model, field, this.generators);
    };
    ModelCreateInputGenerator.prototype.generateScalarFieldType = function (model, args, field) {
        return ModelCreateInputGenerator.generateScalarFieldTypeForInputType(model, field, this.generators);
    };
    return ModelCreateInputGenerator;
}(generator_1.ModelInputObjectTypeGenerator));
exports.default = ModelCreateInputGenerator;
//# sourceMappingURL=modelCreateInputGenerator.js.map