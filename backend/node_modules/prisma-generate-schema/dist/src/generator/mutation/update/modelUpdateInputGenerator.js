"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var generator_1 = require("../../generator");
var ModelUpdateInputGenerator = /** @class */ (function (_super) {
    __extends(ModelUpdateInputGenerator, _super);
    function ModelUpdateInputGenerator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ModelUpdateInputGenerator.generateScalarFieldTypeForInputType = function (model, field, generators) {
        if (generator_1.TypeFromModelGenerator.reservedFields.includes(field.name)) {
            return null;
        }
        if (field.isList) {
            return generators.scalarListUpdateInput.generate(model, field);
        }
        else {
            return generators.scalarTypeGenerator.mapToScalarFieldTypeForceOptional(field);
        }
    };
    /**
     * Generates an update model input field for a relational type, handling the four cases many/one and with/without related type.
     * @param model
     * @param field
     * @param generators
     */
    ModelUpdateInputGenerator.generateRelationFieldForInputType = function (model, field, generators) {
        if (field.relatedField !== null) {
            var relationInfo = { relatedField: field, relatedType: model, relationName: field.relationName };
            if (field.isList) {
                return generators.modelUpdateManyWithoutRelatedInput.generate(field.type, relationInfo);
            }
            else {
                if (field.isRequired) {
                    return generators.modelUpdateOneRequiredWithoutRelatedInput.generate(field.type, relationInfo);
                }
                else {
                    return generators.modelUpdateOneWithoutRelatedInput.generate(field.type, relationInfo);
                }
            }
        }
        else {
            var relationInfo = { relatedField: field, relatedType: model, relationName: null };
            if (field.isList) {
                return generators.modelUpdateManyInput.generate(field.type, relationInfo);
            }
            else {
                if (field.isRequired) {
                    return generators.modelUpdateOneRequiredInput.generate(field.type, relationInfo);
                }
                else {
                    return generators.modelUpdateOneInput.generate(field.type, relationInfo);
                }
            }
        }
    };
    ModelUpdateInputGenerator.prototype.wouldBeEmpty = function (model, args) {
        return !generator_1.TypeFromModelGenerator.hasFieldsExcept.apply(generator_1.TypeFromModelGenerator, [model.fields].concat(generator_1.TypeFromModelGenerator.reservedFields));
    };
    ModelUpdateInputGenerator.prototype.getTypeName = function (input, args) {
        return input.name + "UpdateInput";
    };
    ModelUpdateInputGenerator.prototype.generateScalarFieldType = function (model, args, field) {
        return ModelUpdateInputGenerator.generateScalarFieldTypeForInputType(model, field, this.generators);
    };
    ModelUpdateInputGenerator.prototype.generateRelationFieldType = function (model, args, field) {
        return ModelUpdateInputGenerator.generateRelationFieldForInputType(model, field, this.generators);
    };
    return ModelUpdateInputGenerator;
}(generator_1.RelatedModelInputObjectTypeGenerator));
exports.default = ModelUpdateInputGenerator;
//# sourceMappingURL=modelUpdateInputGenerator.js.map