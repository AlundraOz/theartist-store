"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var parser_1 = require("../../src/datamodel/parser");
/**
 * Assertion helper for fields.
 */
function expectField(candidate, name, required, list, type, defaultValue) {
    if (defaultValue === void 0) { defaultValue = null; }
    var fieldObj = candidate.fields.filter(function (f) { return f.name === name; })[0];
    expect(fieldObj).toBeDefined();
    expect(fieldObj.isRequired).toEqual(required);
    expect(fieldObj.isList).toEqual(list);
    expect(fieldObj.type).toEqual(type);
    expect(fieldObj.defaultValue).toEqual(defaultValue);
    return fieldObj;
}
/**
 * Assertion helper for types
 */
function expectType(types, name, isEnum) {
    if (isEnum === void 0) { isEnum = false; }
    var type = types.filter(function (t) { return t.name === name; })[0];
    expect(type).toBeDefined();
    expect(type.isEnum).toEqual(isEnum);
    return type;
}
test("Parse a type with scalars correctly.", function () {
    var model = "\n    type User {\n      requiredInt: Int!\n      stringList: [String!]!\n      optionalDateTime: DateTime\n      anotherInt: Int! @default(value: 10)\n    }\n  ";
    var types = parser_1.default.parseFromSchemaString(model);
    var userType = expectType(types, 'User');
    expectField(userType, 'requiredInt', true, false, 'Int');
    expectField(userType, 'stringList', false, true, 'String');
    expectField(userType, 'optionalDateTime', false, false, 'DateTime');
    expectField(userType, 'anotherInt', true, false, 'Int', '10');
});
test("Parse a type with an enum correctly.", function () {
    var model = "\n    type User {\n      enumField: UserRole!\n    }\n\n    enum UserRole {\n      user,\n      admin,\n      mod\n    }\n  ";
    var types = parser_1.default.parseFromSchemaString(model);
    var userType = expectType(types, 'User');
    var userRoleEnum = expectType(types, 'UserRole', true);
    expectField(userType, 'enumField', true, false, userRoleEnum);
    expectField(userRoleEnum, 'user', false, false, 'String');
    expectField(userRoleEnum, 'admin', false, false, 'String');
    expectField(userRoleEnum, 'mod', false, false, 'String');
});
test("Connect relations correctly.", function () {
    var model = "\n    type A {\n      b: B\n      c: C @relation(nane: \"relation\")\n    }\n\n    type B {\n      a: A\n      c: C\n    }\n\n    type C {\n      a: A @relation(nane: \"relation\")\n    }\n  ";
    var types = parser_1.default.parseFromSchemaString(model);
    var A = expectType(types, 'A');
    var B = expectType(types, 'B');
    var C = expectType(types, 'C');
    var Ab = expectField(A, 'b', false, false, B);
    var Ac = expectField(A, 'c', false, false, C);
    var Ba = expectField(B, 'a', false, false, A);
    var Bc = expectField(B, 'c', false, false, C);
    var Ca = expectField(C, 'a', false, false, A);
    expect(Ab.relatedField).toEqual(Ba);
    expect(Ac.relatedField).toEqual(Ca);
    expect(Ba.relatedField).toEqual(Ab);
    expect(Bc.relatedField).toEqual(null);
    expect(Ca.relatedField).toEqual(Ac);
});
//# sourceMappingURL=parserTest.js.map