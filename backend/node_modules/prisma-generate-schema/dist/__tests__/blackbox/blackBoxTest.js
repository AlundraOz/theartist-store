"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var parser_1 = require("../../src/datamodel/parser");
var graphql_1 = require("graphql");
var utilities_1 = require("graphql/utilities");
var defaultGenerators_1 = require("../../src/generator/defaultGenerators");
var astTools_1 = require("../../src/util/astTools");
var fs = require("fs");
var path = require("path");
function blackBoxTest(name) {
    var generators = new defaultGenerators_1.default();
    var modelPath = path.join(__dirname, "cases/" + name + "/model.graphql");
    var prismaPath = path.join(__dirname, "cases/" + name + "/prisma.graphql");
    expect(fs.existsSync(modelPath));
    expect(fs.existsSync(prismaPath));
    var model = fs.readFileSync(modelPath, { encoding: 'UTF-8' });
    var prisma = fs.readFileSync(prismaPath, { encoding: 'UTF-8' });
    var types = parser_1.default.parseFromSchemaString(model);
    var ourSchema = generators.schema.generate(types, {});
    var ourPrintedSchema = utilities_1.printSchema(ourSchema);
    // Write a copy of the generated schema to the FS, for debugging
    fs.writeFileSync(path.join(__dirname, "cases/" + name + "/generated.graphql"), ourPrintedSchema, { encoding: 'UTF-8' });
    // Check if our schema equals the prisma schema. 
    var prismaSchema = utilities_1.buildSchema(prisma);
    astTools_1.default.assertTypesEqual(prismaSchema, ourSchema);
    // Check if we can parse the schema we build (e.g. it's syntactically valid).
    graphql_1.parse(ourPrintedSchema);
}
exports.default = blackBoxTest;
var testNames = fs.readdirSync(path.join(__dirname, 'cases'));
var _loop_1 = function (testName) {
    test("Generates input type for " + testName + " correctly", function () {
        blackBoxTest(testName);
    });
};
for (var _i = 0, testNames_1 = testNames; _i < testNames_1.length; _i++) {
    var testName = testNames_1[_i];
    _loop_1(testName);
}
//# sourceMappingURL=blackBoxTest.js.map