"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Output_1 = require("./Output");
var path = require("path");
var fs = require("fs-extra");
var yaml = require("js-yaml");
var lodash_1 = require("lodash");
var debug = require('debug')('EnvironmentMigrator');
var readMore = ". Read more here: https://goo.gl/3bLCVV";
var EnvironmentMigrator = /** @class */ (function () {
    function EnvironmentMigrator(home, out) {
        if (out === void 0) { out = new Output_1.Output(); }
        this.home = home;
        this.out = out;
        this.prismaPath = path.join(this.home, '.prisma');
        this.prismaBackupPath = path.join(this.home, '.prisma.backup');
        this.rcBackupPath = path.join(this.home, '.prismarc.backup');
        this.rcPath = path.join(this.home, '.prismarc');
    }
    EnvironmentMigrator.prototype.migrate = function () {
        if (fs.pathExistsSync(this.prismaPath)) {
            var isFile = fs.lstatSync(this.prismaPath).isFile();
            if (isFile) {
                this.migratePrismaFile();
            }
            else {
                this.migratePrismaFolder();
            }
            debug("prismaPath " + this.prismaPath + " does exists");
        }
        else {
            debug("prismaPath " + this.prismaPath + " does not exist");
        }
        if (fs.pathExistsSync(this.rcPath)) {
            var isFile = fs.lstatSync(this.rcPath).isFile();
            if (isFile) {
                this.migrateRC();
            }
            else {
                this.migrateRCFolder();
            }
        }
    };
    EnvironmentMigrator.prototype.migratePrismaFile = function () {
        var file = fs.readFileSync(this.prismaPath, 'utf-8');
        // only migrate yaml, if it's not json
        try {
            var content = JSON.parse(file);
            this.migratePrismaJsonFile();
        }
        catch (e) {
            try {
                var content = yaml.safeLoad(file);
                this.migratePrismaYamlFile(content);
            }
            catch (e) {
                //
            }
        }
    };
    EnvironmentMigrator.prototype.migratePrismaYamlFile = function (content) {
        this.mergeAndSavePrismaRC({
            'prisma-1.0': content,
        });
        this.movePrismaFile();
        this.out.log('Its content has been migrated to ~/.prismarc');
    };
    EnvironmentMigrator.prototype.mergeAndSavePrismaRC = function (content) {
        var fileExists = fs.pathExistsSync(this.rcPath);
        var file = fileExists ? fs.readFileSync(this.rcPath, 'utf-8') : null;
        var currentRC = file ? yaml.safeLoad(file) : {};
        currentRC = currentRC.clusters || currentRC.platformToken ? {} : currentRC;
        var newRC = lodash_1.merge(currentRC, content);
        var rcString = yaml.safeDump(JSON.parse(JSON.stringify(newRC)));
        fs.writeFileSync(this.rcPath, rcString);
    };
    EnvironmentMigrator.prototype.migratePrismaJsonFile = function () {
        this.movePrismaFile();
    };
    EnvironmentMigrator.prototype.migratePrismaFolder = function () {
        var configPath = path.join(this.home, '.prisma/config.yml');
        if (fs.pathExistsSync(configPath)) {
            var file = fs.readFileSync(configPath, 'utf-8');
            try {
                var content = yaml.safeLoad(file);
                this.mergeAndSavePrismaRC({
                    'prisma-1.0': content,
                });
                this.out.warn("Moved content of ~/.prisma/config.yml to ~/.prismarc" + readMore);
            }
            catch (e) {
                //
            }
        }
        if (!fs.pathExistsSync(this.prismaBackupPath)) {
            fs.moveSync(this.prismaPath, this.prismaBackupPath);
            this.out.warn("~/.prisma/ folder found. It has been moved to ~/.prisma.backup.");
        }
        else {
            this.out
                .warn("~/.prisma/ folder found. It could not be moved, as ~/.prisma.backup already exists.\nPlease remove ~/.prisma by hand to prevent this warning.");
        }
    };
    EnvironmentMigrator.prototype.migrateRC = function () {
        var rc = fs.readFileSync(this.rcPath, 'utf-8');
        var success = false;
        try {
            var content = yaml.safeLoad(rc);
            if (!this.hasCorrectFormat(content)) {
                this.mergeAndSavePrismaRC({
                    'prisma-framework': content,
                });
                success = true;
            }
            else {
                return;
            }
        }
        catch (e) {
            //
        }
        if (!fs.pathExistsSync(this.rcBackupPath)) {
            fs.writeFileSync(this.rcBackupPath, rc);
            this.out.warn("~/.prismarc file found. It has been moved to ~/.prismarc.backup.");
        }
        else {
            this.out
                .warn("~/.prismarc file found. It could not be moved, as ~/.prismarc.backup already exists.\nPlease remove ~/.prismarc by hand to prevent this warning.");
        }
        if (success) {
            this.out.log("Its content has been migrated to ~/.prismarc");
        }
    };
    EnvironmentMigrator.prototype.migrateRCFolder = function () {
        this.moveRCFolder();
    };
    EnvironmentMigrator.prototype.movePrismaFile = function () {
        if (!fs.pathExistsSync(this.prismaBackupPath)) {
            fs.moveSync(this.prismaPath, this.prismaBackupPath);
            this.out.warn("Old ~/.prisma file found. It has been moved to ~/.prisma.backup.");
        }
        else {
            this.out
                .warn("Old ~/.prisma file found. It could not be moved, as ~/.prisma.backup already exists.\nPlease remove ~/.prisma by hand to prevent this warning.");
        }
    };
    EnvironmentMigrator.prototype.moveRCFolder = function () {
        if (!fs.pathExistsSync(this.rcBackupPath)) {
            fs.moveSync(this.rcPath, this.rcBackupPath);
            this.out.warn("~/.prismarc/ folder found. It has been moved to ~/.prismarc.backup/.");
        }
        else {
            this.out
                .warn("~/.prismarc folder found. It could not be moved, as ~/.prismarc.backup already exists.\nPlease remove ~/.prismarc/ by hand to prevent this warning.");
        }
    };
    EnvironmentMigrator.prototype.moveRCFile = function () {
        if (!fs.pathExistsSync(this.rcBackupPath)) {
            fs.moveSync(this.rcPath, this.rcBackupPath);
            this.out.warn("~/.prismarc file found. It has been moved to " + this.rcBackupPath + ".");
        }
        else {
            this.out
                .warn("~/.prismarc file found. It could not be moved, as ~/.prismarc.backup already exists.\nPlease remove ~/.prismarc by hand to prevent this warning.");
        }
    };
    EnvironmentMigrator.prototype.hasCorrectFormat = function (content) {
        if (!content) {
            return false;
        }
        if (Object.keys(content).length > 0) {
            return content['prisma-1.0'] || content['prisma-framework'];
        }
    };
    return EnvironmentMigrator;
}());
exports.EnvironmentMigrator = EnvironmentMigrator;
//# sourceMappingURL=EnvironmentMigrator.js.map