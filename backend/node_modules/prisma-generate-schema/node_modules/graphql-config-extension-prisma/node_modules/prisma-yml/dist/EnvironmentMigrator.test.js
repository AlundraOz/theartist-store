"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var getTmpDir_1 = require("./test/getTmpDir");
var EnvironmentMigrator_1 = require("./EnvironmentMigrator");
var fs = require("fs-extra");
var path = require("path");
var Output_1 = require("./Output");
/**
 * Tests overview
  test('.prisma with json, non-existent backup file', () => {
  test('.prisma with json, existing backup file', () => {
  test('.prisma with yaml, non-existent backup file', () => {
  test('.prisma with yaml, existing backup file', () => {
  test('.prisma folder, non-existent backup file, non-existent .prismarc', () => {
  test('.prisma folder, non-existent backup file, existing .prismarc', () => {
  test('.prisma folder, non-existent backup file, existing .prismarc', () => {
  test('.prismarc folder, non-existent backup file', () => {
  test('.prismarc folder, existing backup folder (or file)', () => {
  test('.prismarc file with valid yaml, non-existent backup file', () => {
  test('.prismarc file with valid yaml, existing backup folder (or file)', () => {
  test('.prismarc file with invalid yaml, non-existent backup file', () => {
  test('.prismarc file with invalid yaml, existing backup folder (or file)', () => {
 */
describe('EnvironmentMigrator', function () {
    test('.prisma with json, non-existent backup file', function () {
        var home = getTmpDir_1.getTmpDir();
        fs.outputFileSync(path.join(home, '.prisma'), '{"example": "Json"}');
        var out = new Output_1.TestOutput();
        var migrator = new EnvironmentMigrator_1.EnvironmentMigrator(home, out);
        migrator.migrate();
        expect(out.output).toMatchSnapshot();
        expect(fs.readdirSync(home)).toMatchSnapshot();
        fs.removeSync(home);
    });
    test('.prisma with json, existing backup file', function () {
        var home = getTmpDir_1.getTmpDir();
        fs.writeFileSync(path.join(home, '.prisma'), '{"example": "Json"}');
        fs.writeFileSync(path.join(home, '.prisma.backup'), '');
        var out = new Output_1.TestOutput();
        var migrator = new EnvironmentMigrator_1.EnvironmentMigrator(home, out);
        migrator.migrate();
        expect(out.output).toMatchSnapshot();
        expect(fs.readdirSync(home)).toMatchSnapshot();
        fs.removeSync(home);
    });
    test('.prisma with yaml, non-existent backup file', function () {
        var home = getTmpDir_1.getTmpDir();
        fs.outputFileSync(path.join(home, '.prisma'), "clusters:\n  local:\n    host: 'http://localhost:60000'\n  remote:\n    host: 'https://remote.graph.cool'\n    clusterSecret: 'here-is-a-token'");
        var out = new Output_1.TestOutput();
        var migrator = new EnvironmentMigrator_1.EnvironmentMigrator(home, out);
        migrator.migrate();
        expect(out.output).toMatchSnapshot();
        expect(fs.readdirSync(home)).toMatchSnapshot();
        expect(fs.readFileSync(path.join(home, '.prismarc'), 'utf-8')).toMatchSnapshot();
        fs.removeSync(home);
    });
    test('.prisma with yaml, existing backup file', function () {
        var home = getTmpDir_1.getTmpDir();
        fs.outputFileSync(path.join(home, '.prisma'), "clusters:\n  local:\n    host: 'http://localhost:60000'\n  remote:\n    host: 'https://remote.graph.cool'\n    clusterSecret: 'here-is-a-token'");
        fs.outputFileSync(path.join(home, '.prisma.backup'), "clusters:\n  local:\n    host: 'http://localhost:60000'\n  remote:\n    host: 'https://remote.graph.cool'\n    clusterSecret: 'here-is-a-token'");
        var out = new Output_1.TestOutput();
        var migrator = new EnvironmentMigrator_1.EnvironmentMigrator(home, out);
        migrator.migrate();
        expect(out.output).toMatchSnapshot();
        expect(fs.readdirSync(home)).toMatchSnapshot();
        fs.removeSync(home);
    });
    test('.prisma folder, non-existent backup file, non-existent .prismarc', function () {
        var home = getTmpDir_1.getTmpDir();
        fs.outputFileSync(path.join(home, '.prisma/config.yml'), "clusters:\n  local:\n    host: 'http://localhost:60000'\n  remote:\n    host: 'https://remote.graph.cool'\n    clusterSecret: 'here-is-a-token'");
        var out = new Output_1.TestOutput();
        var migrator = new EnvironmentMigrator_1.EnvironmentMigrator(home, out);
        migrator.migrate();
        expect(out.output).toMatchSnapshot();
        expect(fs.readdirSync(home)).toMatchSnapshot();
        expect(fs.readFileSync(path.join(home, '.prismarc'), 'utf-8')).toMatchSnapshot();
        fs.removeSync(home);
    });
    test('.prisma folder, non-existent backup file, existing .prismarc', function () {
        var home = getTmpDir_1.getTmpDir();
        fs.outputFileSync(path.join(home, '.prisma/config.yml'), "clusters:\n  local2:\n    host: 'http://localhost:60000'\n  remote:\n    host: 'https://remote.graph.cool'\n    clusterSecret: 'here-is-a-token'");
        fs.outputFileSync(path.join(home, '.prismarc'), "prisma-framework:\n  clusters:\n    local:\n      host: 'http://localhost:60000'\n    remote:\n      host: 'https://remote.graph.cool'\n      clusterSecret: 'here-is-a-token'\nprisma-1.0:\n  clusters:\n    local:\n      host: 'http://localhost:60002'\n    remote:\n      host: 'https://remote.graph.cool'\n      clusterSecret: 'here-is-a-token'");
        var out = new Output_1.TestOutput();
        var migrator = new EnvironmentMigrator_1.EnvironmentMigrator(home, out);
        migrator.migrate();
        expect(out.output).toMatchSnapshot();
        expect(fs.readdirSync(home)).toMatchSnapshot();
        expect(fs.readFileSync(path.join(home, '.prismarc'), 'utf-8')).toMatchSnapshot();
        fs.removeSync(home);
    });
    test('.prisma folder, existing backup folder (or file), execute 2 times', function () {
        var home = getTmpDir_1.getTmpDir();
        fs.outputFileSync(path.join(home, '.prisma/config.yml'), "clusters:\n  local2:\n    host: 'http://localhost:60000'\n  remote:\n    host: 'https://remote.graph.cool'\n    clusterSecret: 'here-is-a-token'");
        fs.outputFileSync(path.join(home, '.prisma.backup'), "prisma-framework:\n  clusters:\n    local:\n      host: 'http://localhost:60000'\n    remote:\n      host: 'https://remote.graph.cool'\n      clusterSecret: 'here-is-a-token'\nprisma-1.0:\n  clusters:\n    local:\n      host: 'http://localhost:60002'\n    remote:\n      host: 'https://remote.graph.cool'\n      clusterSecret: 'here-is-a-token'");
        var out = new Output_1.TestOutput();
        var migrator = new EnvironmentMigrator_1.EnvironmentMigrator(home, out);
        migrator.migrate();
        // migrate 2 times
        migrator.migrate();
        expect(out.output).toMatchSnapshot();
        expect(fs.readdirSync(home)).toMatchSnapshot();
        fs.removeSync(home);
    });
    test('.prismarc folder, non-existent backup file', function () {
        var home = getTmpDir_1.getTmpDir();
        fs.mkdirpSync(path.join(home, '.prismarc'));
        var out = new Output_1.TestOutput();
        var migrator = new EnvironmentMigrator_1.EnvironmentMigrator(home, out);
        migrator.migrate();
        // migrate 2 times
        migrator.migrate();
        expect(out.output).toMatchSnapshot();
        expect(fs.readdirSync(home)).toMatchSnapshot();
        fs.removeSync(home);
    });
    test('.prismarc folder, existing backup folder (or file)', function () {
        var home = getTmpDir_1.getTmpDir();
        fs.mkdirpSync(path.join(home, '.prismarc'));
        fs.mkdirpSync(path.join(home, '.prismarc.backup'));
        var out = new Output_1.TestOutput();
        var migrator = new EnvironmentMigrator_1.EnvironmentMigrator(home, out);
        migrator.migrate();
        expect(out.output).toMatchSnapshot();
        expect(fs.readdirSync(home)).toMatchSnapshot();
        fs.removeSync(home);
    });
    test('.prismarc file with valid yaml, non-existent backup file', function () {
        var home = getTmpDir_1.getTmpDir();
        fs.outputFileSync(path.join(home, '.prismarc'), "clusters:\n  local:\n    host: 'http://localhost:60000'\n  remote:\n    host: 'https://remote.graph.cool'\n    clusterSecret: 'here-is-a-token'");
        var out = new Output_1.TestOutput();
        var migrator = new EnvironmentMigrator_1.EnvironmentMigrator(home, out);
        migrator.migrate();
        expect(out.output).toMatchSnapshot();
        expect(fs.readdirSync(home)).toMatchSnapshot();
        expect(fs.readFileSync(path.join(home, '.prismarc'), 'utf-8')).toMatchSnapshot();
        fs.removeSync(home);
    });
    test('.prismarc file with valid yaml, existing backup folder (or file)', function () {
        var home = getTmpDir_1.getTmpDir();
        fs.outputFileSync(path.join(home, '.prismarc'), "clusters:\n  local:\n    host: 'http://localhost:60000'\n  remote:\n    host: 'https://remote.graph.cool'\n    clusterSecret: 'here-is-a-token'");
        fs.outputFileSync(path.join(home, '.prismarc.backup'), "clusters:\n  local:\n    host: 'http://localhost:60000'\n  remote:\n    host: 'https://remote.graph.cool'\n    clusterSecret: 'here-is-a-token'");
        var out = new Output_1.TestOutput();
        var migrator = new EnvironmentMigrator_1.EnvironmentMigrator(home, out);
        migrator.migrate();
        expect(out.output).toMatchSnapshot();
        expect(fs.readdirSync(home)).toMatchSnapshot();
        expect(fs.readFileSync(path.join(home, '.prismarc'), 'utf-8')).toMatchSnapshot();
        fs.removeSync(home);
    });
    test('.prismarc file with invalid yaml, non-existent backup file', function () {
        var home = getTmpDir_1.getTmpDir();
        fs.outputFileSync(path.join(home, '.prismarc'), "clusters\n  local:\n    host: http://localhost:60000'\n  remote:\n    host: 'https://remote.graph.cool'\n    clusterSecret: 'here-is-a-token'");
        var out = new Output_1.TestOutput();
        var migrator = new EnvironmentMigrator_1.EnvironmentMigrator(home, out);
        migrator.migrate();
        expect(out.output).toMatchSnapshot();
        expect(fs.readdirSync(home)).toMatchSnapshot();
        expect(fs.readFileSync(path.join(home, '.prismarc'), 'utf-8')).toMatchSnapshot();
        fs.removeSync(home);
    });
    test('.prismarc file with invalid yaml, existing backup folder (or file)', function () {
        var home = getTmpDir_1.getTmpDir();
        fs.outputFileSync(path.join(home, '.prismarc'), "clusters:\n  local:\n    host 'http://localhost:60000'\n  remote:\n    host: https://remote.graph.cool'\n    clusterSecret: 'here-is-a-token'");
        fs.outputFileSync(path.join(home, '.prismarc.backup'), "clusters:\n  local:\n    host: 'http://localhost:60000'\n  remote:\n    host: 'https://remote.graph.cool'\n    clusterSecret: 'here-is-a-token'");
        var out = new Output_1.TestOutput();
        var migrator = new EnvironmentMigrator_1.EnvironmentMigrator(home, out);
        migrator.migrate();
        expect(out.output).toMatchSnapshot();
        expect(fs.readdirSync(home)).toMatchSnapshot();
        expect(fs.readFileSync(path.join(home, '.prismarc'), 'utf-8')).toMatchSnapshot();
        fs.removeSync(home);
    });
});
//# sourceMappingURL=EnvironmentMigrator.test.js.map