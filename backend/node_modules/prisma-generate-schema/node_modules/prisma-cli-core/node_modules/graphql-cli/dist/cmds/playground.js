"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var chalk_1 = require("chalk");
var crypto = require("crypto");
var express = require("express");
var requestProxy = require("express-request-proxy");
var fs = require("fs");
var graphql_playground_middleware_express_1 = require("graphql-playground-middleware-express");
var opn = require("opn");
var os = require("os");
var path = require("path");
var _1 = require("../");
exports.command = 'playground';
exports.describe = 'Open interactive GraphQL Playground';
exports.builder = {
    port: {
        description: 'port to start local server with voyager on',
    },
    endpoint: {
        alias: 'e',
        describe: 'Endpoint name',
        type: 'string',
    },
    web: {
        alias: 'w',
        describe: 'Open web version (even if desktop app available)',
        type: 'boolean',
    },
};
function randomString(len) {
    if (len === void 0) { len = 32; }
    return crypto
        .randomBytes(Math.ceil(len * 3 / 4))
        .toString('base64')
        .slice(0, len)
        .replace(/\+/g, '0')
        .replace(/\//g, '0');
}
function handler(context, argv) {
    return __awaiter(this, void 0, void 0, function () {
        var localPlaygroundPath, envPath, url, app, config, projects, projectConfig, endpoint, port_1, listener_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    localPlaygroundPath = "/Applications/GraphQL Playground.app/Contents/MacOS/GraphQL Playground";
                    if (!(fs.existsSync(localPlaygroundPath) && !argv.web)) return [3 /*break*/, 1];
                    envPath = path.join(os.tmpdir(), randomString() + ".json");
                    fs.writeFileSync(envPath, JSON.stringify(process.env));
                    url = "graphql-playground://?cwd=" + process.cwd() + "&envPath=" + envPath;
                    opn(url, { wait: false });
                    return [3 /*break*/, 6];
                case 1:
                    app = express();
                    return [4 /*yield*/, context.getConfig()];
                case 2:
                    config = _a.sent();
                    projects = config.getProjects();
                    if (!(projects === undefined)) return [3 /*break*/, 4];
                    return [4 /*yield*/, context.getProjectConfig()];
                case 3:
                    projectConfig = _a.sent();
                    if (!projectConfig.endpointsExtension) {
                        throw _1.noEndpointError;
                    }
                    endpoint = projectConfig.endpointsExtension.getEndpoint(argv.endpoint);
                    app.use('/graphql', requestProxy({
                        url: endpoint.url,
                        headers: endpoint.headers,
                    }));
                    app.use('/playground', graphql_playground_middleware_express_1.default({ endpoint: '/graphql' }));
                    return [3 /*break*/, 5];
                case 4:
                    app.use('/playground', graphql_playground_middleware_express_1.default({ useGraphQLConfig: true }));
                    _a.label = 5;
                case 5:
                    port_1 = argv.port || 3000;
                    listener_1 = app.listen(port_1, function () {
                        var host = listener_1.address().address;
                        if (host === '::') {
                            host = 'localhost';
                        }
                        var link = "http://" + host + ":" + port_1 + "/playground";
                        console.log('Serving playground at %s', chalk_1.default.blue(link));
                        opn(link);
                    });
                    _a.label = 6;
                case 6: return [2 /*return*/];
            }
        });
    });
}
exports.handler = handler;
//# sourceMappingURL=playground.js.map