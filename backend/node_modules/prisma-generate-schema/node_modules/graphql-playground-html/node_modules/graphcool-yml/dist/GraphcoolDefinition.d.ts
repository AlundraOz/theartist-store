import { GraphcoolDefinition } from 'graphcool-json-schema';
import { Args } from './types/common';
import { Environment } from './Environment';
import { IOutput } from './Output';
import { Cluster } from './Cluster';
export interface EnvVars {
    [key: string]: string | undefined;
}
export declare class GraphcoolDefinitionClass {
    definition?: GraphcoolDefinition;
    typesString?: string;
    secrets: string[] | null;
    definitionPath?: string | null;
    definitionDir: string;
    env: Environment;
    out?: IOutput;
    envVars: any;
    private definitionString;
    constructor(env: Environment, definitionPath?: string | null, envVars?: EnvVars, out?: IOutput);
    load(args: Args, envPath?: string): Promise<void>;
    validate(): void;
    getToken(serviceName: string, stageName: string): string | undefined;
    getCluster(): Cluster | undefined;
    getTypesString(definition: GraphcoolDefinition): string;
    getClusterName(): string | null;
    getWorkspace(): string | null;
    addCluster(cluster: string, args: any): Promise<void>;
}
