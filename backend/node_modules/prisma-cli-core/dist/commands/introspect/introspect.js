"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var _a;
var prisma_cli_engine_1 = require("prisma-cli-engine");
var EndpointDialog_1 = require("../../utils/EndpointDialog");
var prisma_db_introspection_1 = require("prisma-db-introspection");
var path = require("path");
var fs = require("fs");
var util_1 = require("../../util");
var chalk_1 = require("chalk");
var pg_1 = require("pg");
var IntrospectCommand = /** @class */ (function (_super) {
    __extends(IntrospectCommand, _super);
    function IntrospectCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IntrospectCommand.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var interactive, pgSchemaName, endpointDialog, client, credentials, connector, introspector, schemas, before, e_1, schema, exists, schemaName, exists, _a, _b, sdl, numTables, fileName, fullFileName;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        interactive = this.flags.interactive;
                        pgSchemaName = this.flags['pg-schema-name'];
                        endpointDialog = new EndpointDialog_1.EndpointDialog({
                            out: this.out,
                            client: this.client,
                            env: this.env,
                            config: this.config,
                            definition: this.definition,
                            shouldAskForGenerator: false,
                        });
                        if (!interactive) return [3 /*break*/, 2];
                        return [4 /*yield*/, endpointDialog.getDatabase(true)];
                    case 1:
                        credentials = _c.sent();
                        client = new pg_1.Client(credentials);
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.definition.load(this.flags)];
                    case 3:
                        _c.sent();
                        client = new prisma_db_introspection_1.PrismaDBClient(this.definition);
                        _c.label = 4;
                    case 4:
                        connector = new prisma_db_introspection_1.PostgresConnector(client);
                        introspector = new prisma_db_introspection_1.Introspector(connector);
                        before = Date.now();
                        _c.label = 5;
                    case 5:
                        _c.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, introspector.listSchemas()];
                    case 6:
                        schemas = _c.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        e_1 = _c.sent();
                        throw new Error("Could not connect to database. " + e_1.message);
                    case 8:
                        if (!(schemas && schemas.length > 0)) return [3 /*break*/, 17];
                        schema = void 0;
                        if (!(schemas.length === 1)) return [3 /*break*/, 9];
                        schema = schemas[0];
                        return [3 /*break*/, 14];
                    case 9:
                        if (!pgSchemaName) return [3 /*break*/, 10];
                        exists = schemas.includes(pgSchemaName);
                        if (!exists) {
                            throw new Error("The provided Postgres Schema " + pgSchemaName + " does not exist. Choose one of " + schemas.join(', '));
                        }
                        schema = pgSchemaName;
                        return [3 /*break*/, 14];
                    case 10:
                        schemaName = this.definition.service + "$" + this.definition.stage;
                        exists = schemas.includes(schemaName);
                        if (!exists) return [3 /*break*/, 11];
                        _a = schemaName;
                        return [3 /*break*/, 13];
                    case 11: return [4 /*yield*/, endpointDialog.selectSchema(schemas.filter(function (s) { return !s.startsWith('prisma-temporary-introspection-service$'); }))];
                    case 12:
                        _a = _c.sent();
                        _c.label = 13;
                    case 13:
                        schema = _a;
                        _c.label = 14;
                    case 14:
                        this.out.action.start("Introspecting schema " + chalk_1.default.bold(schema));
                        return [4 /*yield*/, introspector.introspect(schema)];
                    case 15:
                        _b = _c.sent(), sdl = _b.sdl, numTables = _b.numTables;
                        return [4 /*yield*/, client.end()];
                    case 16:
                        _c.sent();
                        if (numTables === 0) {
                            this.out.log(chalk_1.default.red("\n" + chalk_1.default.bold('Error: ') + "The provided database doesn't contain any tables. Please provide another database."));
                            this.out.exit(1);
                        }
                        fileName = "datamodel-" + new Date().getTime() + ".prisma";
                        fullFileName = path.join(this.config.definitionDir, fileName);
                        fs.writeFileSync(fullFileName, sdl);
                        this.out.action.stop(util_1.prettyTime(Date.now() - before));
                        this.out.log("Created datamodel definition based on " + numTables + " database tables.");
                        this.out.log(chalk_1.default.bold('Created 1 new file:') + "    GraphQL SDL-based datamodel (derived from existing database)\n\n  " + chalk_1.default.cyan(fileName) + "\n");
                        if (!this.definition.definition.datamodel) {
                            this.definition.addDatamodel(fileName);
                            this.out.log("Added " + chalk_1.default.bold("datamodel: " + fileName) + " to prisma.yml");
                        }
                        return [3 /*break*/, 18];
                    case 17: throw new Error("Could not find schema in provided database.");
                    case 18: return [2 /*return*/];
                }
            });
        });
    };
    IntrospectCommand.topic = 'introspect';
    IntrospectCommand.description = 'Introspect database schema(s) of service';
    IntrospectCommand.flags = (_a = {
            interactive: prisma_cli_engine_1.flags.boolean({
                char: 'i',
                description: 'Interactive mode',
            })
        },
        _a['pg-schema-name'] = prisma_cli_engine_1.flags.string({
            description: 'Name of the Postgres schema',
            char: 'p',
        }),
        _a);
    IntrospectCommand.hidden = false;
    return IntrospectCommand;
}(prisma_cli_engine_1.Command));
exports.default = IntrospectCommand;
//# sourceMappingURL=introspect.js.map