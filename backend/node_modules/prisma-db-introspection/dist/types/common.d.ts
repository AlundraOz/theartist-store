import { ClientConfig } from 'pg';
export declare type TypeIdentifier = 'String' | 'Int' | 'Float' | 'Boolean' | 'DateTime' | 'ID' | 'UUID' | 'Json';
export interface Connector {
    listSchemas(): Promise<string[]>;
    listTables(schemaName: string): Promise<Table[]>;
}
export declare class Table {
    name: string;
    columns: Column[];
    relations: TableRelation[];
    constructor(name: string, columns: Column[], relations: TableRelation[]);
    hasPrimaryKey(): boolean;
    isJoinTable(): boolean;
    isRelationColumn(column: Column): boolean;
}
export interface Column {
    name: string;
    isUnique: boolean;
    isPrimaryKey: boolean;
    defaultValue: any;
    type: string;
    typeIdentifier: TypeIdentifier;
    comment: string | null;
    nullable: boolean;
}
export interface TableRelation {
    source_table: string;
    target_table: string;
    source_column: string;
    target_column: string;
}
export interface PrimaryKey {
    tableName: string;
    fields: string[];
}
export declare type PostgresConnectionDetails = string | ClientConfig;
export interface DBClient {
    query(queryText: string, values?: any[]): Promise<QueryResult>;
    connect(): Promise<void>;
    end(): Promise<void>;
}
export interface QueryResult {
    rows: any[];
}
