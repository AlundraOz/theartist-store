"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var os = require("os");
var _ = require("lodash");
var GQLType = /** @class */ (function () {
    function GQLType(name, fields, directives, renderCommented) {
        this.name = name;
        this.fields = fields;
        this.directives = directives;
        this.renderCommented = renderCommented;
    }
    // Determines if this type is valid GraphQL compatible with Prisma
    GQLType.prototype.isValid = function () {
        return this.fields.some(function (f) { return f.isValid(); });
    };
    GQLType.prototype.render = function () {
        var orderFields = function (fields) {
            return fields.sort(function (a, b) {
                if (a.name < b.name) {
                    return -1;
                }
                if (a.name > b.name) {
                    return 1;
                }
                return 0;
            });
        };
        // Dissect fields
        var idField = this.fields.find(function (x) { return x.isIdField; }) || null;
        var relationFields = []; // orderFields
        var scalarFields = orderFields(this.fields.filter(function (f) { return !f.isIdField; }));
        // Render fields
        var renderedFields = scalarFields.map(function (f) { return f.render(); });
        if (idField !== null) {
            renderedFields.unshift(idField.render());
        }
        relationFields.map(function (f) { return f.render(); }).forEach(function (r) { return renderedFields.push(r); });
        // Render type
        return (this.renderCommented ? "# " : "") + "type " + capitalizeFirstLetter(this.name) + " " + this.directives.join(" ") + " {\n" + renderedFields.join(os.EOL) + "\n" + (this.renderCommented ? "# " : "") + "}";
    };
    return GQLType;
}());
exports.GQLType = GQLType;
var GQLField = /** @class */ (function () {
    function GQLField(name, type, isRequired, directives, isIdField, comment, renderCommented) {
        this.name = name;
        this.type = type;
        this.isRequired = isRequired;
        this.directives = directives;
        this.isIdField = isIdField;
        this.comment = comment;
        this.renderCommented = renderCommented;
    }
    GQLField.prototype.isValid = function () {
        // In current context, commented fields are commented only if they are invalid
        return !this.renderCommented;
    };
    GQLField.prototype.render = function () {
        var prefix = (!this.isValid() || this.renderCommented) ? "# " : "";
        var suffix = (this.comment.length > 0) ? " # " + this.comment : '';
        var directives = this.directives.join(" ");
        var directivesString = directives.trim().length > 0 ? " " + directives : '';
        return "  " + prefix + this.name + ": " + this.type + (this.isRequired ? '!' : '') + directivesString + suffix;
    };
    return GQLField;
}());
exports.GQLField = GQLField;
var SDL = /** @class */ (function () {
    function SDL(types) {
        this.types = types;
    }
    SDL.prototype.render = function () {
        var orderedTypes = _.sortBy(this.types, ['name']);
        return orderedTypes.map(function (t) { return t.render(); }).join("\n\n");
    };
    return SDL;
}());
exports.SDL = SDL;
// Utilities
function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}
//# sourceMappingURL=graphql.js.map