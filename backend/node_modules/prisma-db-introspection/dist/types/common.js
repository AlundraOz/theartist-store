"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Table = /** @class */ (function () {
    function Table(name, columns, relations) {
        this.name = name;
        this.columns = columns;
        this.relations = relations;
    }
    Table.prototype.hasPrimaryKey = function () {
        return this.columns.some(function (x) {
            return x.isPrimaryKey;
        });
    };
    Table.prototype.isJoinTable = function () {
        var _this = this;
        // Table is a join table, if:
        // - It has 2 relations that are not self-relations
        var condition1 = this.relations.filter(function (rel) { return rel.target_table !== _this.name; }).length === 2;
        // - It has no primary key (Prisma doesn't handle join tables with keys)
        var condition2 = !this.columns.some(function (c) { return c.isPrimaryKey; });
        // - It has only other fields that are nullable or have default values (Prisma doesn't set other fields on join tables)
        var condition3 = !this.columns
            .filter(function (c) { return !_this.isRelationColumn(c) !== null; })
            .some(function (c) { return !c.nullable && c.defaultValue === null; });
        return condition1 && condition2 && condition3;
    };
    Table.prototype.isRelationColumn = function (column) {
        return this.relations.some(function (rel) { return rel.source_column == column.name; });
    };
    return Table;
}());
exports.Table = Table;
//# sourceMappingURL=common.js.map