"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_request_1 = require("graphql-request");
var SERVICE_NAME = 'prisma-temporary-introspection-service';
var SERVICE_STAGE = 'prisma-temporary-test-stage';
var SERVICE_SECRET = 'prisma-instrospection-secret';
var PrismaDBClient = /** @class */ (function () {
    function PrismaDBClient(definition) {
        this.cluster = definition.getCluster();
        this.definition = definition;
        if (this.cluster.shared) {
            throw new Error("Cannot introspect demo server. Please use introspection on your self-hosted server.");
        }
    }
    PrismaDBClient.prototype.query = function (query, variables) {
        if (variables === void 0) { variables = []; }
        return __awaiter(this, void 0, void 0, function () {
            var finalQuery, databases;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        finalQuery = this.replace(query, variables);
                        return [4 /*yield*/, this.getDatabases()];
                    case 1:
                        databases = _a.sent();
                        if (!databases || !databases[0]) {
                            throw new Error("Prisma Config doesn't have any database connection");
                        }
                        return [2 /*return*/, this.client.request("\n      mutation executeRaw($query: String! $database: PrismaDatabase) {\n        rows: executeRaw(\n          database: $database\n          query: $query\n        )\n      }\n    ", {
                                query: finalQuery,
                                database: databases[0],
                            })];
                }
            });
        });
    };
    PrismaDBClient.prototype.getDatabases = function () {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.request("{\n      __type(name: \"PrismaDatabase\") {\n        kind\n        enumValues {\n          name\n        }\n      }\n    }")];
                    case 1:
                        result = _a.sent();
                        if (result && result.__type && result.__type.enumValues) {
                            return [2 /*return*/, result.__type.enumValues.map(function (v) { return v.name; })];
                        }
                        return [2 /*return*/, []];
                }
            });
        });
    };
    PrismaDBClient.prototype.replace = function (query, variables) {
        if (variables === void 0) { variables = []; }
        var e_1, _a;
        var queryString = query;
        try {
            for (var _b = __values(variables.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), index = _d[0], variable = _d[1];
                var regex = new RegExp("\\$" + (index + 1), 'g');
                queryString = queryString.replace(regex, "'" + variable + "'");
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return queryString;
    };
    PrismaDBClient.prototype.connect = function () {
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, secretsBackup, token;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.cluster
                            .request("mutation($input: AddProjectInput!) {\n      addProject(input: $input) {\n        clientMutationId\n      }\n    }", {
                            input: {
                                name: SERVICE_NAME,
                                stage: SERVICE_STAGE,
                                secrets: [SERVICE_SECRET],
                            },
                        })
                            .then(function (res) { return res.json(); })];
                    case 1:
                        _a.sent();
                        endpoint = this.cluster.getApiEndpoint(SERVICE_NAME, SERVICE_STAGE);
                        secretsBackup = this.definition.secrets;
                        this.definition.secrets = [SERVICE_SECRET];
                        token = this.definition.getToken(SERVICE_NAME, SERVICE_STAGE);
                        this.definition.secrets = secretsBackup;
                        this.client = new graphql_request_1.GraphQLClient(endpoint, {
                            headers: token
                                ? {
                                    Authorization: "Bearer " + token,
                                }
                                : {},
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    PrismaDBClient.prototype.end = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.cluster
                                .request("mutation($input: DeleteProjectInput!) {\n      deleteProject(input: $input) {\n        clientMutationId\n      }\n    }", {
                                input: {
                                    name: SERVICE_NAME,
                                    stage: SERVICE_STAGE,
                                },
                            })
                                .then(function (res) { return res.json(); })];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        e_2 = _a.sent();
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return PrismaDBClient;
}());
exports.PrismaDBClient = PrismaDBClient;
//# sourceMappingURL=PrismaDBClient.js.map