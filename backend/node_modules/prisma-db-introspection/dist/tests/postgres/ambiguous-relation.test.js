"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var Introspector_1 = require("../../Introspector");
var pg_1 = require("pg");
var connectionDetails_1 = require("./connectionDetails");
var PostgresConnector_1 = require("../../connectors/PostgresConnector");
function introspect() {
    var client = new pg_1.Client(connectionDetails_1.connectionDetails);
    var pgConnector = new PostgresConnector_1.PostgresConnector(client);
    return new Introspector_1.Introspector(pgConnector).introspect('public');
}
function testSchema(sql) {
    return __awaiter(this, void 0, void 0, function () {
        var client, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    client = new pg_1.Client(connectionDetails_1.connectionDetails);
                    return [4 /*yield*/, client.connect()];
                case 1:
                    _b.sent();
                    return [4 /*yield*/, client.query('DROP SCHEMA IF EXISTS public cascade;')];
                case 2:
                    _b.sent();
                    return [4 /*yield*/, client.query('CREATE SCHEMA public;')];
                case 3:
                    _b.sent();
                    return [4 /*yield*/, client.query('SET search_path TO public;')];
                case 4:
                    _b.sent();
                    return [4 /*yield*/, client.query(sql)];
                case 5:
                    _b.sent();
                    _a = expect;
                    return [4 /*yield*/, introspect()];
                case 6:
                    _a.apply(void 0, [_b.sent()]).toMatchSnapshot();
                    return [4 /*yield*/, client.end()];
                case 7:
                    _b.sent();
                    return [2 /*return*/];
            }
        });
    });
}
describe('Introspector', function () {
    // Schema from https://github.com/prismagraphql/prisma/issues/2504
    test('test schema - 2504', function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, testSchema(sql)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
});
var sql = "\n--\n-- PostgreSQL database dump\n--\n\n-- Dumped from database version 10.4\n-- Dumped by pg_dump version 10.4\n\nSET statement_timeout = 0;\nSET lock_timeout = 0;\nSET idle_in_transaction_session_timeout = 0;\nSET client_encoding = 'UTF8';\nSET standard_conforming_strings = on;\nSELECT pg_catalog.set_config('search_path', '', false);\nSET check_function_bodies = false;\nSET client_min_messages = warning;\nSET row_security = off;\n\n--\n-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: \n--\n\nCREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;\n\n\n--\n-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: \n--\n\nCOMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';\n\n\n--\n-- Name: intarray; Type: EXTENSION; Schema: -; Owner: \n--\n\nCREATE EXTENSION IF NOT EXISTS intarray WITH SCHEMA public;\n\n\n--\n-- Name: EXTENSION intarray; Type: COMMENT; Schema: -; Owner: \n--\n\nCOMMENT ON EXTENSION intarray IS 'functions, operators, and index support for 1-D arrays of integers';\n\n\nSET default_tablespace = '';\n\nSET default_with_oids = false;\n\n--\n-- Name: direct_messages; Type: TABLE; Schema: public; Owner: postgres\n--\n\nCREATE TABLE public.direct_messages (\n    id integer NOT NULL,\n    receiver_id integer,\n    sender_id integer\n);\n\n\nALTER TABLE public.direct_messages OWNER TO postgres;\n\n--\n-- Name: direct_messages_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres\n--\n\nCREATE SEQUENCE public.direct_messages_id_seq\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\n\nALTER TABLE public.direct_messages_id_seq OWNER TO postgres;\n\n--\n-- Name: direct_messages_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres\n--\n\nALTER SEQUENCE public.direct_messages_id_seq OWNED BY public.direct_messages.id;\n\n--\n-- Name: users; Type: TABLE; Schema: public; Owner: postgres\n--\n\nCREATE TABLE public.users (\n    id integer NOT NULL\n);\n\n\nALTER TABLE public.users OWNER TO postgres;\n\n--\n-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres\n--\n\nCREATE SEQUENCE public.users_id_seq\n    START WITH 1\n    INCREMENT BY 1\n    NO MINVALUE\n    NO MAXVALUE\n    CACHE 1;\n\n\nALTER TABLE public.users_id_seq OWNER TO postgres;\n\n--\n-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres\n--\n\nALTER SEQUENCE public.users_id_seq OWNED BY public.users.id;\n\n\n--\n-- Name: direct_messages id; Type: DEFAULT; Schema: public; Owner: postgres\n--\n\nALTER TABLE ONLY public.direct_messages ALTER COLUMN id SET DEFAULT nextval('public.direct_messages_id_seq'::regclass);\n\n--\n-- Name: users id; Type: DEFAULT; Schema: public; Owner: postgres\n--\n\nALTER TABLE ONLY public.users ALTER COLUMN id SET DEFAULT nextval('public.users_id_seq'::regclass);\n\n--\n-- Name: direct_messages direct_messages_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres\n--\n\nALTER TABLE ONLY public.direct_messages\n    ADD CONSTRAINT direct_messages_pkey PRIMARY KEY (id);\n\n--\n-- Name: users users_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres\n--\n\nALTER TABLE ONLY public.users\n    ADD CONSTRAINT users_pkey PRIMARY KEY (id);\n\n--\n-- Name: direct_messages direct_messages_receiver_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres\n--\n\nALTER TABLE ONLY public.direct_messages\n    ADD CONSTRAINT direct_messages_receiver_id_fkey FOREIGN KEY (receiver_id) REFERENCES public.users(id) ON UPDATE CASCADE ON DELETE SET NULL;\n\n\n--\n-- Name: direct_messages direct_messages_sender_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres\n--\n\nALTER TABLE ONLY public.direct_messages\n    ADD CONSTRAINT direct_messages_sender_id_fkey FOREIGN KEY (sender_id) REFERENCES public.users(id) ON UPDATE CASCADE ON DELETE SET NULL;\n\n--\n-- PostgreSQL database dump complete\n--\n";
//# sourceMappingURL=ambiguous-relation.test.js.map