"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var Introspector_1 = require("../../Introspector");
var pg_1 = require("pg");
var connectionDetails_1 = require("./connectionDetails");
var PostgresConnector_1 = require("../../connectors/PostgresConnector");
function introspect() {
    var client = new pg_1.Client(connectionDetails_1.connectionDetails);
    var pgConnector = new PostgresConnector_1.PostgresConnector(client);
    return new Introspector_1.Introspector(pgConnector).introspect('DatabaseIntrospector');
}
function testSchema(sql) {
    return __awaiter(this, void 0, void 0, function () {
        var client, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    client = new pg_1.Client(connectionDetails_1.connectionDetails);
                    return [4 /*yield*/, client.connect()];
                case 1:
                    _b.sent();
                    return [4 /*yield*/, client.query('DROP SCHEMA IF EXISTS DatabaseIntrospector cascade;')];
                case 2:
                    _b.sent();
                    return [4 /*yield*/, client.query('CREATE SCHEMA DatabaseIntrospector;')];
                case 3:
                    _b.sent();
                    return [4 /*yield*/, client.query('SET search_path TO DatabaseIntrospector;')];
                case 4:
                    _b.sent();
                    return [4 /*yield*/, client.query(sql)];
                case 5:
                    _b.sent();
                    _a = expect;
                    return [4 /*yield*/, introspect()];
                case 6:
                    _a.apply(void 0, [_b.sent()]).toMatchSnapshot();
                    return [4 /*yield*/, client.end()];
                case 7:
                    _b.sent();
                    return [2 /*return*/];
            }
        });
    });
}
describe('Introspector', function () {
    test('large example database', function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: 
                // https://github.com/lerocha/chinook-database/wiki/Chinook-Schema
                return [4 /*yield*/, testSchema("\n/*******************************************************************************\n Chinook Database - Version 1.4\n Script: Chinook_PostgreSql.sql\n Description: Creates and populates the Chinook database.\n DB Server: PostgreSql\n Author: Luis Rocha\n License: http://www.codeplex.com/ChinookDatabase/license\n********************************************************************************/\n\n\n/*******************************************************************************\n Create Tables\n********************************************************************************/\nCREATE TABLE \"Album\"\n(\n  \"AlbumId\" INT NOT NULL,\n  \"Title\" VARCHAR(160) NOT NULL,\n  \"ArtistId\" INT NOT NULL,\n  CONSTRAINT \"PK_Album\" PRIMARY KEY  (\"AlbumId\")\n);\n\nCREATE TABLE \"Artist\"\n(\n  \"ArtistId\" INT NOT NULL,\n  \"Name\" VARCHAR(120),\n  CONSTRAINT \"PK_Artist\" PRIMARY KEY  (\"ArtistId\")\n);\n\nCREATE TABLE \"Customer\"\n(\n  \"CustomerId\" INT NOT NULL,\n  \"FirstName\" VARCHAR(40) NOT NULL,\n  \"LastName\" VARCHAR(20) NOT NULL,\n  \"Company\" VARCHAR(80),\n  \"Address\" VARCHAR(70),\n  \"City\" VARCHAR(40),\n  \"State\" VARCHAR(40),\n  \"Country\" VARCHAR(40),\n  \"PostalCode\" VARCHAR(10),\n  \"Phone\" VARCHAR(24),\n  \"Fax\" VARCHAR(24),\n  \"Email\" VARCHAR(60) NOT NULL,\n  \"SupportRepId\" INT,\n  CONSTRAINT \"PK_Customer\" PRIMARY KEY  (\"CustomerId\")\n);\n\nCREATE TABLE \"Employee\"\n(\n  \"EmployeeId\" INT NOT NULL,\n  \"LastName\" VARCHAR(20) NOT NULL,\n  \"FirstName\" VARCHAR(20) NOT NULL,\n  \"Title\" VARCHAR(30),\n  \"ReportsTo\" INT,\n  \"BirthDate\" TIMESTAMP,\n  \"HireDate\" TIMESTAMP,\n  \"Address\" VARCHAR(70),\n  \"City\" VARCHAR(40),\n  \"State\" VARCHAR(40),\n  \"Country\" VARCHAR(40),\n  \"PostalCode\" VARCHAR(10),\n  \"Phone\" VARCHAR(24),\n  \"Fax\" VARCHAR(24),\n  \"Email\" VARCHAR(60),\n  CONSTRAINT \"PK_Employee\" PRIMARY KEY  (\"EmployeeId\")\n);\n\nCREATE TABLE \"Genre\"\n(\n  \"GenreId\" INT NOT NULL,\n  \"Name\" VARCHAR(120),\n  CONSTRAINT \"PK_Genre\" PRIMARY KEY  (\"GenreId\")\n);\n\nCREATE TABLE \"Invoice\"\n(\n  \"InvoiceId\" INT NOT NULL,\n  \"CustomerId\" INT NOT NULL,\n  \"InvoiceDate\" TIMESTAMP NOT NULL,\n  \"BillingAddress\" VARCHAR(70),\n  \"BillingCity\" VARCHAR(40),\n  \"BillingState\" VARCHAR(40),\n  \"BillingCountry\" VARCHAR(40),\n  \"BillingPostalCode\" VARCHAR(10),\n  \"Total\" NUMERIC(10,2) NOT NULL,\n  CONSTRAINT \"PK_Invoice\" PRIMARY KEY  (\"InvoiceId\")\n);\n\nCREATE TABLE \"InvoiceLine\"\n(\n  \"InvoiceLineId\" INT NOT NULL,\n  \"InvoiceId\" INT NOT NULL,\n  \"TrackId\" INT NOT NULL,\n  \"UnitPrice\" NUMERIC(10,2) NOT NULL,\n  \"Quantity\" INT NOT NULL,\n  CONSTRAINT \"PK_InvoiceLine\" PRIMARY KEY  (\"InvoiceLineId\")\n);\n\nCREATE TABLE \"MediaType\"\n(\n  \"MediaTypeId\" INT NOT NULL,\n  \"Name\" VARCHAR(120),\n  CONSTRAINT \"PK_MediaType\" PRIMARY KEY  (\"MediaTypeId\")\n);\n\nCREATE TABLE \"Playlist\"\n(\n  \"PlaylistId\" INT NOT NULL,\n  \"Name\" VARCHAR(120),\n  CONSTRAINT \"PK_Playlist\" PRIMARY KEY  (\"PlaylistId\")\n);\n\nCREATE TABLE \"PlaylistTrack\"\n(\n  \"PlaylistId\" INT NOT NULL,\n  \"TrackId\" INT NOT NULL,\n  CONSTRAINT \"PK_PlaylistTrack\" PRIMARY KEY  (\"PlaylistId\", \"TrackId\")\n);\n\nCREATE TABLE \"Track\"\n(\n  \"TrackId\" INT NOT NULL,\n  \"Name\" VARCHAR(200) NOT NULL,\n  \"AlbumId\" INT,\n  \"MediaTypeId\" INT NOT NULL,\n  \"GenreId\" INT,\n  \"Composer\" VARCHAR(220),\n  \"Milliseconds\" INT NOT NULL,\n  \"Bytes\" INT,\n  \"UnitPrice\" NUMERIC(10,2) NOT NULL,\n  CONSTRAINT \"PK_Track\" PRIMARY KEY  (\"TrackId\")\n);\n\n\n\n/*******************************************************************************\n Create Primary Key Unique Indexes\n********************************************************************************/\n\n/*******************************************************************************\n Create Foreign Keys\n********************************************************************************/\nALTER TABLE \"Album\" ADD CONSTRAINT \"FK_AlbumArtistId\"\n  FOREIGN KEY (\"ArtistId\") REFERENCES \"Artist\" (\"ArtistId\") ON DELETE NO ACTION ON UPDATE NO ACTION;\n\nCREATE INDEX \"IFK_AlbumArtistId\" ON \"Album\" (\"ArtistId\");\n\nALTER TABLE \"Customer\" ADD CONSTRAINT \"FK_CustomerSupportRepId\"\n  FOREIGN KEY (\"SupportRepId\") REFERENCES \"Employee\" (\"EmployeeId\") ON DELETE NO ACTION ON UPDATE NO ACTION;\n\nCREATE INDEX \"IFK_CustomerSupportRepId\" ON \"Customer\" (\"SupportRepId\");\n\nALTER TABLE \"Employee\" ADD CONSTRAINT \"FK_EmployeeReportsTo\"\n  FOREIGN KEY (\"ReportsTo\") REFERENCES \"Employee\" (\"EmployeeId\") ON DELETE NO ACTION ON UPDATE NO ACTION;\n\nCREATE INDEX \"IFK_EmployeeReportsTo\" ON \"Employee\" (\"ReportsTo\");\n\nALTER TABLE \"Invoice\" ADD CONSTRAINT \"FK_InvoiceCustomerId\"\n  FOREIGN KEY (\"CustomerId\") REFERENCES \"Customer\" (\"CustomerId\") ON DELETE NO ACTION ON UPDATE NO ACTION;\n\nCREATE INDEX \"IFK_InvoiceCustomerId\" ON \"Invoice\" (\"CustomerId\");\n\nALTER TABLE \"InvoiceLine\" ADD CONSTRAINT \"FK_InvoiceLineInvoiceId\"\n  FOREIGN KEY (\"InvoiceId\") REFERENCES \"Invoice\" (\"InvoiceId\") ON DELETE NO ACTION ON UPDATE NO ACTION;\n\nCREATE INDEX \"IFK_InvoiceLineInvoiceId\" ON \"InvoiceLine\" (\"InvoiceId\");\n\nALTER TABLE \"InvoiceLine\" ADD CONSTRAINT \"FK_InvoiceLineTrackId\"\n  FOREIGN KEY (\"TrackId\") REFERENCES \"Track\" (\"TrackId\") ON DELETE NO ACTION ON UPDATE NO ACTION;\n\nCREATE INDEX \"IFK_InvoiceLineTrackId\" ON \"InvoiceLine\" (\"TrackId\");\n\nALTER TABLE \"PlaylistTrack\" ADD CONSTRAINT \"FK_PlaylistTrackPlaylistId\"\n  FOREIGN KEY (\"PlaylistId\") REFERENCES \"Playlist\" (\"PlaylistId\") ON DELETE NO ACTION ON UPDATE NO ACTION;\n\nALTER TABLE \"PlaylistTrack\" ADD CONSTRAINT \"FK_PlaylistTrackTrackId\"\n  FOREIGN KEY (\"TrackId\") REFERENCES \"Track\" (\"TrackId\") ON DELETE NO ACTION ON UPDATE NO ACTION;\n\nCREATE INDEX \"IFK_PlaylistTrackTrackId\" ON \"PlaylistTrack\" (\"TrackId\");\n\nALTER TABLE \"Track\" ADD CONSTRAINT \"FK_TrackAlbumId\"\n  FOREIGN KEY (\"AlbumId\") REFERENCES \"Album\" (\"AlbumId\") ON DELETE NO ACTION ON UPDATE NO ACTION;\n\nCREATE INDEX \"IFK_TrackAlbumId\" ON \"Track\" (\"AlbumId\");\n\nALTER TABLE \"Track\" ADD CONSTRAINT \"FK_TrackGenreId\"\n  FOREIGN KEY (\"GenreId\") REFERENCES \"Genre\" (\"GenreId\") ON DELETE NO ACTION ON UPDATE NO ACTION;\n\nCREATE INDEX \"IFK_TrackGenreId\" ON \"Track\" (\"GenreId\");\n\nALTER TABLE \"Track\" ADD CONSTRAINT \"FK_TrackMediaTypeId\"\n  FOREIGN KEY (\"MediaTypeId\") REFERENCES \"MediaType\" (\"MediaTypeId\") ON DELETE NO ACTION ON UPDATE NO ACTION;\n\nCREATE INDEX \"IFK_TrackMediaTypeId\" ON \"Track\" (\"MediaTypeId\");\n        ")];
                case 1:
                    // https://github.com/lerocha/chinook-database/wiki/Chinook-Schema
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=chinook.test.js.map