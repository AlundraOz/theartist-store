{"version":3,"file":"downshift.umd.min.js","sources":["../../src/set-a11y-status.js","../../src/stateChangeTypes.js","../../node_modules/compute-scroll-into-view/es/index.js","../../src/utils.js","../../src/downshift.js"],"sourcesContent":["// istanbul ignore next\nlet statusDiv =\n  typeof document === 'undefined'\n    ? null\n    : document.getElementById('a11y-status-message')\n\nlet statuses = []\n\n/**\n * @param {String} status the status message\n */\nfunction setStatus(status) {\n  const isSameAsLast = statuses[statuses.length - 1] === status\n  if (isSameAsLast) {\n    statuses = [...statuses, status]\n  } else {\n    statuses = [status]\n  }\n  const div = getStatusDiv()\n\n  // Remove previous children\n  while (div.lastChild) {\n    div.removeChild(div.firstChild)\n  }\n\n  statuses.filter(Boolean).forEach((statusItem, index) => {\n    div.appendChild(getStatusChildDiv(statusItem, index))\n  })\n}\n\n/**\n * @param {String} status the status message\n * @param {Number} index the index\n * @return {HTMLElement} the child node\n */\nfunction getStatusChildDiv(status, index) {\n  const display = index === statuses.length - 1 ? 'block' : 'none'\n\n  const childDiv = document.createElement('div')\n  childDiv.style.display = display\n  childDiv.textContent = status\n\n  return childDiv\n}\n\n/**\n * Get the status node or create it if it does not already exist\n * @return {HTMLElement} the status node\n */\nfunction getStatusDiv() {\n  if (statusDiv) {\n    return statusDiv\n  }\n  statusDiv = document.createElement('div')\n  statusDiv.setAttribute('id', 'a11y-status-message')\n  statusDiv.setAttribute('role', 'status')\n  statusDiv.setAttribute('aria-live', 'assertive')\n  statusDiv.setAttribute('aria-relevant', 'additions text')\n  Object.assign(statusDiv.style, {\n    border: '0',\n    clip: 'rect(0 0 0 0)',\n    height: '1px',\n    margin: '-1px',\n    overflow: 'hidden',\n    padding: '0',\n    position: 'absolute',\n    width: '1px',\n  })\n  document.body.appendChild(statusDiv)\n  return statusDiv\n}\n\nexport default setStatus\n","import productionEnum from './productionEnum.macro'\n\nexport const unknown = productionEnum('__autocomplete_unknown__')\nexport const mouseUp = productionEnum('__autocomplete_mouseup__')\nexport const itemMouseEnter = productionEnum('__autocomplete_item_mouseenter__')\nexport const keyDownArrowUp = productionEnum(\n  '__autocomplete_keydown_arrow_up__',\n)\nexport const keyDownArrowDown = productionEnum(\n  '__autocomplete_keydown_arrow_down__',\n)\nexport const keyDownEscape = productionEnum('__autocomplete_keydown_escape__')\nexport const keyDownEnter = productionEnum('__autocomplete_keydown_enter__')\nexport const clickItem = productionEnum('__autocomplete_click_item__')\nexport const blurInput = productionEnum('__autocomplete_blur_input__')\nexport const changeInput = productionEnum('__autocomplete_change_input__')\nexport const keyDownSpaceButton = productionEnum(\n  '__autocomplete_keydown_space_button__',\n)\nexport const clickButton = productionEnum('__autocomplete_click_button__')\nexport const blurButton = productionEnum('__autocomplete_blur_button__')\nexport const controlledPropUpdatedSelectedItem = productionEnum(\n  '__autocomplete_controlled_prop_updated_selected_item__',\n)\nexport const touchStart = productionEnum('__autocomplete_touchstart__')\n","function isElement(el) {\n  return el != null && typeof el === 'object' && el.nodeType === 1;\n}\n\nfunction canOverflow(overflow, skipOverflowHiddenElements) {\n  if (skipOverflowHiddenElements && overflow === 'hidden') {\n    return false;\n  }\n\n  return overflow !== 'visible' && overflow !== 'clip';\n}\n\nfunction isScrollable(el, skipOverflowHiddenElements) {\n  if (el.clientHeight < el.scrollHeight || el.clientWidth < el.scrollWidth) {\n    var style = getComputedStyle(el, null);\n    return canOverflow(style.overflowY, skipOverflowHiddenElements) || canOverflow(style.overflowX, skipOverflowHiddenElements);\n  }\n\n  return false;\n}\n\nfunction alignNearest(scrollingEdgeStart, scrollingEdgeEnd, scrollingSize, scrollingBorderStart, scrollingBorderEnd, elementEdgeStart, elementEdgeEnd, elementSize) {\n  if (elementEdgeStart < scrollingEdgeStart && elementEdgeEnd > scrollingEdgeEnd || elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd) {\n    return 0;\n  }\n\n  if (elementEdgeStart < scrollingEdgeStart && elementSize < scrollingSize || elementEdgeEnd > scrollingEdgeEnd && elementSize > scrollingSize) {\n    return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart;\n  }\n\n  if (elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize || elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize) {\n    return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd;\n  }\n\n  return 0;\n}\n\nexport default (function (target, options) {\n  var scrollMode = options.scrollMode,\n      block = options.block,\n      inline = options.inline,\n      boundary = options.boundary,\n      skipOverflowHiddenElements = options.skipOverflowHiddenElements;\n  var checkBoundary = typeof boundary === 'function' ? boundary : function (node) {\n    return node !== boundary;\n  };\n\n  if (!isElement(target)) {\n    throw new TypeError('Invalid target');\n  }\n\n  var scrollingElement = document.scrollingElement || document.documentElement;\n  var frames = [];\n  var cursor = target;\n\n  while (isElement(cursor) && checkBoundary(cursor)) {\n    cursor = cursor.parentNode;\n\n    if (cursor === scrollingElement) {\n      frames.push(cursor);\n      break;\n    }\n\n    if (cursor === document.body && isScrollable(cursor) && !isScrollable(document.documentElement)) {\n      continue;\n    }\n\n    if (isScrollable(cursor, skipOverflowHiddenElements)) {\n      frames.push(cursor);\n    }\n  }\n\n  var viewportWidth = window.visualViewport ? visualViewport.width : innerWidth;\n  var viewportHeight = window.visualViewport ? visualViewport.height : innerHeight;\n  var viewportX = window.scrollX || pageXOffset;\n  var viewportY = window.scrollY || pageYOffset;\n\n  var _target$getBoundingCl = target.getBoundingClientRect(),\n      targetHeight = _target$getBoundingCl.height,\n      targetWidth = _target$getBoundingCl.width,\n      targetTop = _target$getBoundingCl.top,\n      targetRight = _target$getBoundingCl.right,\n      targetBottom = _target$getBoundingCl.bottom,\n      targetLeft = _target$getBoundingCl.left;\n\n  var targetBlock = block === 'start' || block === 'nearest' ? targetTop : block === 'end' ? targetBottom : targetTop + targetHeight / 2;\n  var targetInline = inline === 'center' ? targetLeft + targetWidth / 2 : inline === 'end' ? targetRight : targetLeft;\n  var computations = [];\n\n  for (var index = 0; index < frames.length; index++) {\n    var frame = frames[index];\n\n    var _frame$getBoundingCli = frame.getBoundingClientRect(),\n        _height = _frame$getBoundingCli.height,\n        _width = _frame$getBoundingCli.width,\n        _top = _frame$getBoundingCli.top,\n        right = _frame$getBoundingCli.right,\n        bottom = _frame$getBoundingCli.bottom,\n        _left = _frame$getBoundingCli.left;\n\n    if (scrollMode === 'if-needed' && targetTop >= 0 && targetLeft >= 0 && targetBottom <= viewportHeight && targetRight <= viewportWidth && targetTop >= _top && targetBottom <= bottom && targetLeft >= _left && targetRight <= right) {\n      return computations;\n    }\n\n    var frameStyle = getComputedStyle(frame);\n    var borderLeft = parseInt(frameStyle.borderLeftWidth, 10);\n    var borderTop = parseInt(frameStyle.borderTopWidth, 10);\n    var borderRight = parseInt(frameStyle.borderRightWidth, 10);\n    var borderBottom = parseInt(frameStyle.borderBottomWidth, 10);\n    var blockScroll = 0;\n    var inlineScroll = 0;\n    var scrollbarWidth = 'offsetWidth' in frame ? frame.offsetWidth - frame.clientWidth - borderLeft - borderRight : 0;\n    var scrollbarHeight = 'offsetHeight' in frame ? frame.offsetHeight - frame.clientHeight - borderTop - borderBottom : 0;\n\n    if (scrollingElement === frame) {\n      if (block === 'start') {\n        blockScroll = targetBlock;\n      } else if (block === 'end') {\n        blockScroll = targetBlock - viewportHeight;\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(viewportY, viewportY + viewportHeight, viewportHeight, borderTop, borderBottom, viewportY + targetBlock, viewportY + targetBlock + targetHeight, targetHeight);\n      } else {\n        blockScroll = targetBlock - viewportHeight / 2;\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline;\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - viewportWidth / 2;\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - viewportWidth;\n      } else {\n        inlineScroll = alignNearest(viewportX, viewportX + viewportWidth, viewportWidth, borderLeft, borderRight, viewportX + targetInline, viewportX + targetInline + targetWidth, targetWidth);\n      }\n\n      blockScroll = Math.max(0, blockScroll + viewportY);\n      inlineScroll = Math.max(0, inlineScroll + viewportX);\n    } else {\n      if (block === 'start') {\n        blockScroll = targetBlock - _top - borderTop;\n      } else if (block === 'end') {\n        blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight;\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(_top, bottom, _height, borderTop, borderBottom + scrollbarHeight, targetBlock, targetBlock + targetHeight, targetHeight);\n      } else {\n        blockScroll = targetBlock - (_top + _height / 2) + scrollbarHeight / 2;\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline - _left - borderLeft;\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - (_left + _width / 2) + scrollbarWidth / 2;\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - right + borderRight + scrollbarWidth;\n      } else {\n        inlineScroll = alignNearest(_left, right, _width, borderLeft, borderRight + scrollbarWidth, targetInline, targetInline + targetWidth, targetWidth);\n      }\n\n      var scrollLeft = frame.scrollLeft,\n          scrollTop = frame.scrollTop;\n      blockScroll = Math.max(0, Math.min(scrollTop + blockScroll, frame.scrollHeight - _height + scrollbarHeight));\n      inlineScroll = Math.max(0, Math.min(scrollLeft + inlineScroll, frame.scrollWidth - _width + scrollbarWidth));\n      targetBlock += scrollTop - blockScroll;\n      targetInline += scrollLeft - inlineScroll;\n    }\n\n    computations.push({\n      el: frame,\n      top: blockScroll,\n      left: inlineScroll\n    });\n  }\n\n  return computations;\n});","import computeScrollIntoView from 'compute-scroll-into-view'\nimport {isPreact} from './is.macro'\n\nlet idCounter = 0\n\n/**\n * Accepts a parameter and returns it if it's a function\n * or a noop function if it's not. This allows us to\n * accept a callback, but not worry about it if it's not\n * passed.\n * @param {Function} cb the callback\n * @return {Function} a function\n */\nfunction cbToCb(cb) {\n  return typeof cb === 'function' ? cb : noop\n}\n\nfunction noop() {}\n\n/**\n * Scroll node into view if necessary\n * @param {HTMLElement} node the element that should scroll into view\n * @param {HTMLElement} rootNode the root element of the component\n */\nfunction scrollIntoView(node, rootNode) {\n  if (node === null) {\n    return\n  }\n\n  const actions = computeScrollIntoView(node, {\n    boundary: rootNode,\n    block: 'nearest',\n    scrollMode: 'if-needed',\n  })\n  actions.forEach(({el, top, left}) => {\n    el.scrollTop = top\n    el.scrollLeft = left\n  })\n}\n\n/**\n * @param {HTMLElement} parent the parent node\n * @param {HTMLElement} child the child node\n * @return {Boolean} whether the parent is the child or the child is in the parent\n */\nfunction isOrContainsNode(parent, child) {\n  return parent === child || (parent.contains && parent.contains(child))\n}\n\n/**\n * Simple debounce implementation. Will call the given\n * function once after the time given has passed since\n * it was last called.\n * @param {Function} fn the function to call after the time\n * @param {Number} time the time to wait\n * @return {Function} the debounced function\n */\nfunction debounce(fn, time) {\n  let timeoutId\n\n  function cancel() {\n    if (timeoutId) {\n      clearTimeout(timeoutId)\n    }\n  }\n\n  function wrapper(...args) {\n    cancel()\n    timeoutId = setTimeout(() => {\n      timeoutId = null\n      fn(...args)\n    }, time)\n  }\n\n  wrapper.cancel = cancel\n\n  return wrapper\n}\n\n/**\n * This is intended to be used to compose event handlers.\n * They are executed in order until one of them sets\n * `event.preventDownshiftDefault = true`.\n * @param {...Function} fns the event handler functions\n * @return {Function} the event handler to add to an element\n */\nfunction callAllEventHandlers(...fns) {\n  return (event, ...args) =>\n    fns.some(fn => {\n      if (fn) {\n        fn(event, ...args)\n      }\n      return (\n        event.preventDownshiftDefault ||\n        (event.hasOwnProperty('nativeEvent') &&\n          event.nativeEvent.preventDownshiftDefault)\n      )\n    })\n}\n\n/**\n * This return a function that will call all the given functions with\n * the arguments with which it's called. It does a null-check before\n * attempting to call the functions and can take any number of functions.\n * @param {...Function} fns the functions to call\n * @return {Function} the function that calls all the functions\n */\nfunction callAll(...fns) {\n  return (...args) => {\n    fns.forEach(fn => {\n      if (fn) {\n        fn(...args)\n      }\n    })\n  }\n}\n\n/**\n * This generates a unique ID for an instance of Downshift\n * @return {String} the unique ID\n */\nfunction generateId() {\n  return String(idCounter++)\n}\n\n/**\n * This is only used in tests\n * @param {Number} num the number to set the idCounter to\n */\nfunction setIdCounter(num) {\n  idCounter = num\n}\n\n/**\n * Resets idCounter to 0. Used for SSR.\n */\nfunction resetIdCounter() {\n  idCounter = 0\n}\n\n/**\n * @param {Object} param the downshift state and other relevant properties\n * @return {String} the a11y status message\n */\nfunction getA11yStatusMessage({\n  isOpen,\n  highlightedItem,\n  selectedItem,\n  resultCount,\n  previousResultCount,\n  itemToString,\n}) {\n  if (!isOpen) {\n    if (selectedItem) {\n      return itemToString(selectedItem)\n    } else {\n      return ''\n    }\n  }\n  const resultCountChanged = resultCount !== previousResultCount\n  if (!resultCount) {\n    return 'No results.'\n  } else if (!highlightedItem || resultCountChanged) {\n    return `${resultCount} ${\n      resultCount === 1 ? 'result is' : 'results are'\n    } available, use up and down arrow keys to navigate.`\n  }\n  return itemToString(highlightedItem)\n}\n\n/**\n * Takes an argument and if it's an array, returns the first item in the array\n * otherwise returns the argument\n * @param {*} arg the maybe-array\n * @param {*} defaultValue the value if arg is falsey not defined\n * @return {*} the arg or it's first item\n */\nfunction unwrapArray(arg, defaultValue) {\n  arg = Array.isArray(arg) ? /* istanbul ignore next (preact) */ arg[0] : arg\n  if (!arg && defaultValue) {\n    return defaultValue\n  } else {\n    return arg\n  }\n}\n\n/**\n * @param {Object} element (P)react element\n * @return {Boolean} whether it's a DOM element\n */\nfunction isDOMElement(element) {\n  /* istanbul ignore if */\n  if (isPreact) {\n    // then this is preact\n    return typeof element.nodeName === 'string'\n  }\n\n  // then we assume this is react\n  return typeof element.type === 'string'\n}\n\n/**\n * @param {Object} element (P)react element\n * @return {Object} the props\n */\nfunction getElementProps(element) {\n  // props for react, attributes for preact\n\n  /* istanbul ignore if */\n  if (isPreact) {\n    return element.attributes\n  }\n\n  return element.props\n}\n\n/**\n * Throws a helpful error message for required properties. Useful\n * to be used as a default in destructuring or object params.\n * @param {String} fnName the function name\n * @param {String} propName the prop name\n */\nfunction requiredProp(fnName, propName) {\n  // eslint-disable-next-line no-console\n  console.error(`The property \"${propName}\" is required in \"${fnName}\"`)\n}\n\nconst stateKeys = [\n  'highlightedIndex',\n  'inputValue',\n  'isOpen',\n  'selectedItem',\n  'type',\n]\n/**\n * @param {Object} state the state object\n * @return {Object} state that is relevant to downshift\n */\nfunction pickState(state = {}) {\n  const result = {}\n  stateKeys.forEach(k => {\n    if (state.hasOwnProperty(k)) {\n      result[k] = state[k]\n    }\n  })\n  return result\n}\n\n/**\n * Normalizes the 'key' property of a KeyboardEvent in IE/Edge\n * @param {Object} event a keyboardEvent object\n * @return {String} keyboard key\n */\nfunction normalizeArrowKey(event) {\n  const {key, keyCode} = event\n  /* istanbul ignore next (ie) */\n  if (keyCode >= 37 && keyCode <= 40 && key.indexOf('Arrow') !== 0) {\n    return `Arrow${key}`\n  }\n  return key\n}\n\n/**\n * Simple check if the value passed is object literal\n * @param {*} obj any things\n * @return {Boolean} whether it's object literal\n */\nfunction isPlainObject(obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]'\n}\n\nexport {\n  cbToCb,\n  callAllEventHandlers,\n  callAll,\n  debounce,\n  scrollIntoView,\n  generateId,\n  getA11yStatusMessage,\n  unwrapArray,\n  isDOMElement,\n  getElementProps,\n  isOrContainsNode,\n  noop,\n  requiredProp,\n  setIdCounter,\n  resetIdCounter,\n  pickState,\n  isPlainObject,\n  normalizeArrowKey,\n}\n","/* eslint camelcase:0 */\n\nimport React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {isPreact, isReactNative} from './is.macro'\nimport setA11yStatus from './set-a11y-status'\nimport * as stateChangeTypes from './stateChangeTypes'\nimport {\n  cbToCb,\n  callAll,\n  callAllEventHandlers,\n  debounce,\n  scrollIntoView,\n  generateId,\n  getA11yStatusMessage,\n  unwrapArray,\n  isDOMElement,\n  isOrContainsNode,\n  getElementProps,\n  noop,\n  requiredProp,\n  pickState,\n  isPlainObject,\n  normalizeArrowKey,\n} from './utils'\n\nclass Downshift extends Component {\n  static propTypes = {\n    children: PropTypes.func,\n    defaultHighlightedIndex: PropTypes.number,\n    defaultSelectedItem: PropTypes.any,\n    defaultInputValue: PropTypes.string,\n    defaultIsOpen: PropTypes.bool,\n    getA11yStatusMessage: PropTypes.func,\n    itemToString: PropTypes.func,\n    onChange: PropTypes.func,\n    onSelect: PropTypes.func,\n    onStateChange: PropTypes.func,\n    onInputValueChange: PropTypes.func,\n    onUserAction: PropTypes.func,\n    onOuterClick: PropTypes.func,\n    selectedItemChanged: PropTypes.func,\n    stateReducer: PropTypes.func,\n    itemCount: PropTypes.number,\n    id: PropTypes.string,\n    environment: PropTypes.shape({\n      addEventListener: PropTypes.func,\n      removeEventListener: PropTypes.func,\n      document: PropTypes.shape({\n        getElementById: PropTypes.func,\n        activeElement: PropTypes.any,\n        body: PropTypes.any,\n      }),\n    }),\n    suppressRefError: PropTypes.bool,\n    scrollIntoView: PropTypes.func,\n    // things we keep in state for uncontrolled components\n    // but can accept as props for controlled components\n    /* eslint-disable react/no-unused-prop-types */\n    selectedItem: PropTypes.any,\n    isOpen: PropTypes.bool,\n    inputValue: PropTypes.string,\n    highlightedIndex: PropTypes.number,\n    labelId: PropTypes.string,\n    inputId: PropTypes.string,\n    menuId: PropTypes.string,\n    getItemId: PropTypes.func,\n    /* eslint-enable react/no-unused-prop-types */\n  }\n\n  static defaultProps = {\n    defaultHighlightedIndex: null,\n    defaultSelectedItem: null,\n    defaultInputValue: '',\n    defaultIsOpen: false,\n    getA11yStatusMessage,\n    itemToString: i => {\n      if (i == null) {\n        return ''\n      }\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        isPlainObject(i) &&\n        !i.hasOwnProperty('toString')\n      ) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          'downshift: An object was passed to the default implementation of `itemToString`. You should probably provide your own `itemToString` implementation. Please refer to the `itemToString` API documentation.',\n          'The object that was passed:',\n          i,\n        )\n      }\n      return String(i)\n    },\n    onStateChange: noop,\n    onInputValueChange: noop,\n    onUserAction: noop,\n    onChange: noop,\n    onSelect: noop,\n    onOuterClick: noop,\n    selectedItemChanged: (prevItem, item) => prevItem !== item,\n    environment:\n      typeof window === 'undefined' /* istanbul ignore next (ssr) */\n        ? {}\n        : window,\n    stateReducer: (state, stateToSet) => stateToSet,\n    suppressRefError: false,\n    scrollIntoView,\n  }\n\n  static stateChangeTypes = stateChangeTypes\n\n  constructor(props) {\n    super(props)\n    const state = this.getState({\n      highlightedIndex: this.props.defaultHighlightedIndex,\n      isOpen: this.props.defaultIsOpen,\n      inputValue: this.props.defaultInputValue,\n      selectedItem: this.props.defaultSelectedItem,\n    })\n    if (state.selectedItem != null) {\n      state.inputValue = this.props.itemToString(state.selectedItem)\n    }\n    this.state = state\n  }\n\n  id = this.props.id || `downshift-${generateId()}`\n  menuId = this.props.menuId || `${this.id}-menu`\n  labelId = this.props.labelId || `${this.id}-label`\n  inputId = this.props.inputId || `${this.id}-input`\n  getItemId = this.props.getItemId || (index => `${this.id}-item-${index}`)\n\n  input = null\n  items = []\n  // itemCount can be changed asynchronously\n  // from within downshift (so it can't come from a prop)\n  // this is why we store it as an instance and use\n  // getItemCount rather than just use items.length\n  // (to support windowing + async)\n  itemCount = null\n  previousResultCount = 0\n\n  timeoutIds = []\n\n  /**\n   * @param {Function} fn the function to call after the time\n   * @param {Number} time the time to wait\n   */\n  internalSetTimeout = (fn, time) => {\n    const id = setTimeout(() => {\n      this.timeoutIds = this.timeoutIds.filter(i => i !== id)\n      fn()\n    }, time)\n\n    this.timeoutIds.push(id)\n  }\n\n  /**\n   * Clear all running timeouts\n   */\n  internalClearTimeouts() {\n    this.timeoutIds.forEach(id => {\n      clearTimeout(id)\n    })\n\n    this.timeoutIds = []\n  }\n\n  /**\n   * Gets the state based on internal state or props\n   * If a state value is passed via props, then that\n   * is the value given, otherwise it's retrieved from\n   * stateToMerge\n   *\n   * This will perform a shallow merge of the given state object\n   * with the state coming from props\n   * (for the controlled component scenario)\n   * This is used in state updater functions so they're referencing\n   * the right state regardless of where it comes from.\n   *\n   * @param {Object} stateToMerge defaults to this.state\n   * @return {Object} the state\n   */\n  getState(stateToMerge = this.state) {\n    return Object.keys(stateToMerge).reduce((state, key) => {\n      state[key] = this.isControlledProp(key)\n        ? this.props[key]\n        : stateToMerge[key]\n      return state\n    }, {})\n  }\n\n  /**\n   * This determines whether a prop is a \"controlled prop\" meaning it is\n   * state which is controlled by the outside of this component rather\n   * than within this component.\n   * @param {String} key the key to check\n   * @return {Boolean} whether it is a controlled controlled prop\n   */\n  isControlledProp(key) {\n    return this.props[key] !== undefined\n  }\n\n  getItemCount() {\n    // things read better this way. They're in priority order:\n    // 1. `this.itemCount`\n    // 2. `this.props.itemCount`\n    // 3. `this.items.length`\n    let itemCount = this.items.length\n    if (this.itemCount != null) {\n      itemCount = this.itemCount\n    } else if (this.props.itemCount !== undefined) {\n      itemCount = this.props.itemCount\n    }\n    return itemCount\n  }\n\n  setItemCount = count => {\n    this.itemCount = count\n  }\n\n  unsetItemCount = () => {\n    this.itemCount = null\n  }\n\n  getItemNodeFromIndex(index) {\n    return this.props.environment.document.getElementById(this.getItemId(index))\n  }\n\n  setHighlightedIndex = (\n    highlightedIndex = this.props.defaultHighlightedIndex,\n    otherStateToSet = {},\n  ) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState({highlightedIndex, ...otherStateToSet})\n  }\n\n  scrollHighlightedItemIntoView() {\n    /* istanbul ignore else (react-native) */\n    if (!isReactNative) {\n      const node = this.getItemNodeFromIndex(this.getState().highlightedIndex)\n      this.props.scrollIntoView(node, this._rootNode)\n    }\n  }\n\n  moveHighlightedIndex(amount, otherStateToSet) {\n    if (this.getState().isOpen) {\n      this.changeHighlightedIndex(amount, otherStateToSet)\n    } else {\n      this.setHighlightedIndex(undefined, {isOpen: true, ...otherStateToSet})\n    }\n  }\n\n  changeHighlightedIndex(moveAmount, otherStateToSet) {\n    const itemsLastIndex = this.getItemCount() - 1\n    if (itemsLastIndex < 0) {\n      return\n    }\n    const {highlightedIndex} = this.getState()\n    let baseIndex = highlightedIndex\n    if (baseIndex === null) {\n      baseIndex = moveAmount > 0 ? -1 : itemsLastIndex + 1\n    }\n    let newIndex = baseIndex + moveAmount\n    if (newIndex < 0) {\n      newIndex = itemsLastIndex\n    } else if (newIndex > itemsLastIndex) {\n      newIndex = 0\n    }\n    this.setHighlightedIndex(newIndex, otherStateToSet)\n  }\n\n  clearSelection = cb => {\n    this.internalSetState(\n      {\n        selectedItem: null,\n        inputValue: '',\n        isOpen: false,\n      },\n      cb,\n    )\n  }\n\n  selectItem = (item, otherStateToSet, cb) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState(\n      {\n        isOpen: false,\n        highlightedIndex: this.props.defaultHighlightedIndex,\n        selectedItem: item,\n        inputValue: this.isControlledProp('selectedItem')\n          ? this.props.defaultInputValue\n          : this.props.itemToString(item),\n        ...otherStateToSet,\n      },\n      cb,\n    )\n  }\n\n  selectItemAtIndex = (itemIndex, otherStateToSet, cb) => {\n    const item = this.items[itemIndex]\n    if (item == null) {\n      return\n    }\n    this.selectItem(item, otherStateToSet, cb)\n  }\n\n  selectHighlightedItem = (otherStateToSet, cb) => {\n    return this.selectItemAtIndex(\n      this.getState().highlightedIndex,\n      otherStateToSet,\n      cb,\n    )\n  }\n\n  // any piece of our state can live in two places:\n  // 1. Uncontrolled: it's internal (this.state)\n  //    We will call this.setState to update that state\n  // 2. Controlled: it's external (this.props)\n  //    We will call this.props.onStateChange to update that state\n  //\n  // In addition, we'll call this.props.onChange if the\n  // selectedItem is changed.\n  internalSetState = (stateToSet, cb) => {\n    let isItemSelected, onChangeArg\n\n    const onStateChangeArg = {}\n    const isStateToSetFunction = typeof stateToSet === 'function'\n\n    // we want to call `onInputValueChange` before the `setState` call\n    // so someone controlling the `inputValue` state gets notified of\n    // the input change as soon as possible. This avoids issues with\n    // preserving the cursor position.\n    // See https://github.com/paypal/downshift/issues/217 for more info.\n    if (!isStateToSetFunction && stateToSet.hasOwnProperty('inputValue')) {\n      this.props.onInputValueChange(stateToSet.inputValue, {\n        ...this.getStateAndHelpers(),\n        ...stateToSet,\n      })\n    }\n    return this.setState(\n      state => {\n        state = this.getState(state)\n        let newStateToSet = isStateToSetFunction\n          ? stateToSet(state)\n          : stateToSet\n\n        // Your own function that could modify the state that will be set.\n        newStateToSet = this.props.stateReducer(state, newStateToSet)\n\n        // checks if an item is selected, regardless of if it's different from\n        // what was selected before\n        // used to determine if onSelect and onChange callbacks should be called\n        isItemSelected = newStateToSet.hasOwnProperty('selectedItem')\n        // this keeps track of the object we want to call with setState\n        const nextState = {}\n        // this is just used to tell whether the state changed\n        const nextFullState = {}\n        // we need to call on change if the outside world is controlling any of our state\n        // and we're trying to update that state. OR if the selection has changed and we're\n        // trying to update the selection\n        if (\n          isItemSelected &&\n          newStateToSet.selectedItem !== state.selectedItem\n        ) {\n          onChangeArg = newStateToSet.selectedItem\n        }\n        newStateToSet.type = newStateToSet.type || stateChangeTypes.unknown\n\n        Object.keys(newStateToSet).forEach(key => {\n          // onStateChangeArg should only have the state that is\n          // actually changing\n          if (state[key] !== newStateToSet[key]) {\n            onStateChangeArg[key] = newStateToSet[key]\n          }\n          // the type is useful for the onStateChangeArg\n          // but we don't actually want to set it in internal state.\n          // this is an undocumented feature for now... Not all internalSetState\n          // calls support it and I'm not certain we want them to yet.\n          // But it enables users controlling the isOpen state to know when\n          // the isOpen state changes due to mouseup events which is quite handy.\n          if (key === 'type') {\n            return\n          }\n          nextFullState[key] = newStateToSet[key]\n          // if it's coming from props, then we don't care to set it internally\n          if (!this.isControlledProp(key)) {\n            nextState[key] = newStateToSet[key]\n          }\n        })\n\n        // if stateToSet is a function, then we weren't able to call onInputValueChange\n        // earlier, so we'll call it now that we know what the inputValue state will be.\n        if (\n          isStateToSetFunction &&\n          newStateToSet.hasOwnProperty('inputValue')\n        ) {\n          this.props.onInputValueChange(newStateToSet.inputValue, {\n            ...this.getStateAndHelpers(),\n            ...newStateToSet,\n          })\n        }\n\n        return nextState\n      },\n      () => {\n        // call the provided callback if it's a function\n        cbToCb(cb)()\n\n        // only call the onStateChange and onChange callbacks if\n        // we have relevant information to pass them.\n        const hasMoreStateThanType = Object.keys(onStateChangeArg).length > 1\n        if (hasMoreStateThanType) {\n          this.props.onStateChange(onStateChangeArg, this.getStateAndHelpers())\n        }\n\n        if (isItemSelected) {\n          this.props.onSelect(\n            stateToSet.selectedItem,\n            this.getStateAndHelpers(),\n          )\n        }\n\n        if (onChangeArg !== undefined) {\n          this.props.onChange(onChangeArg, this.getStateAndHelpers())\n        }\n        // this is currently undocumented and therefore subject to change\n        // We'll try to not break it, but just be warned.\n        this.props.onUserAction(onStateChangeArg, this.getStateAndHelpers())\n      },\n    )\n  }\n\n  getStateAndHelpers() {\n    const {highlightedIndex, inputValue, selectedItem, isOpen} = this.getState()\n    const {itemToString} = this.props\n    const {id} = this\n    const {\n      getRootProps,\n      getToggleButtonProps,\n      getLabelProps,\n      getMenuProps,\n      getInputProps,\n      getItemProps,\n      openMenu,\n      closeMenu,\n      toggleMenu,\n      selectItem,\n      selectItemAtIndex,\n      selectHighlightedItem,\n      setHighlightedIndex,\n      clearSelection,\n      clearItems,\n      reset,\n      setItemCount,\n      unsetItemCount,\n      internalSetState: setState,\n    } = this\n    return {\n      // prop getters\n      getRootProps,\n      getToggleButtonProps,\n      getLabelProps,\n      getMenuProps,\n      getInputProps,\n      getItemProps,\n\n      // actions\n      reset,\n      openMenu,\n      closeMenu,\n      toggleMenu,\n      selectItem,\n      selectItemAtIndex,\n      selectHighlightedItem,\n      setHighlightedIndex,\n      clearSelection,\n      clearItems,\n      setItemCount,\n      unsetItemCount,\n      setState,\n\n      // props\n      itemToString,\n\n      // derived\n      id,\n\n      // state\n      highlightedIndex,\n      inputValue,\n      isOpen,\n      selectedItem,\n    }\n  }\n\n  //////////////////////////// ROOT\n\n  rootRef = node => (this._rootNode = node)\n\n  getRootProps = (\n    {refKey = 'ref', ...rest} = {},\n    {suppressRefError = false} = {},\n  ) => {\n    // this is used in the render to know whether the user has called getRootProps.\n    // It uses that to know whether to apply the props automatically\n    this.getRootProps.called = true\n    this.getRootProps.refKey = refKey\n    this.getRootProps.suppressRefError = suppressRefError\n    const {isOpen} = this.getState()\n    return {\n      [refKey]: this.rootRef,\n      role: 'combobox',\n      'aria-expanded': isOpen,\n      'aria-haspopup': 'listbox',\n      'aria-owns': isOpen ? this.menuId : null,\n      'aria-labelledby': this.labelId,\n      ...rest,\n    }\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ROOT\n\n  keyDownHandlers = {\n    ArrowDown(event) {\n      event.preventDefault()\n      const amount = event.shiftKey ? 5 : 1\n      this.moveHighlightedIndex(amount, {\n        type: stateChangeTypes.keyDownArrowDown,\n      })\n    },\n\n    ArrowUp(event) {\n      event.preventDefault()\n      const amount = event.shiftKey ? -5 : -1\n      this.moveHighlightedIndex(amount, {\n        type: stateChangeTypes.keyDownArrowUp,\n      })\n    },\n\n    Enter(event) {\n      const {isOpen, highlightedIndex} = this.getState()\n      if (isOpen && highlightedIndex != null) {\n        event.preventDefault()\n        const item = this.items[highlightedIndex]\n        const itemNode = this.getItemNodeFromIndex(highlightedIndex)\n        if (item == null || (itemNode && itemNode.hasAttribute('disabled'))) {\n          return\n        }\n        this.selectHighlightedItem({\n          type: stateChangeTypes.keyDownEnter,\n        })\n      }\n    },\n\n    Escape(event) {\n      event.preventDefault()\n      this.reset({type: stateChangeTypes.keyDownEscape})\n    },\n  }\n\n  //////////////////////////// BUTTON\n\n  buttonKeyDownHandlers = {\n    ...this.keyDownHandlers,\n\n    ' '(event) {\n      event.preventDefault()\n      this.toggleMenu({type: stateChangeTypes.keyDownSpaceButton})\n    },\n  }\n\n  getToggleButtonProps = ({\n    onClick,\n    onPress,\n    onKeyDown,\n    onKeyUp,\n    onBlur,\n    ...rest\n  } = {}) => {\n    const {isOpen} = this.getState()\n    const enabledEventHandlers = isReactNative\n      ? /* istanbul ignore next (react-native) */\n        {\n          onPress: callAllEventHandlers(onPress, this.button_handleClick),\n        }\n      : {\n          onClick: callAllEventHandlers(onClick, this.button_handleClick),\n          onKeyDown: callAllEventHandlers(onKeyDown, this.button_handleKeyDown),\n          onKeyUp: callAllEventHandlers(onKeyUp, this.button_handleKeyUp),\n          onBlur: callAllEventHandlers(onBlur, this.button_handleBlur),\n        }\n    const eventHandlers = rest.disabled ? {} : enabledEventHandlers\n    return {\n      type: 'button',\n      role: 'button',\n      'aria-label': isOpen ? 'close menu' : 'open menu',\n      'aria-haspopup': true,\n      'data-toggle': true,\n      ...eventHandlers,\n      ...rest,\n    }\n  }\n\n  button_handleKeyUp = event => {\n    // Prevent click event from emitting in Firefox\n    event.preventDefault()\n  }\n\n  button_handleKeyDown = event => {\n    const key = normalizeArrowKey(event)\n    if (this.buttonKeyDownHandlers[key]) {\n      this.buttonKeyDownHandlers[key].call(this, event)\n    }\n  }\n\n  button_handleClick = event => {\n    event.preventDefault()\n    // handle odd case for Safari and Firefox which\n    // don't give the button the focus properly.\n    /* istanbul ignore if (can't reasonably test this) */\n    if (\n      !isReactNative &&\n      this.props.environment.document.activeElement ===\n        this.props.environment.document.body\n    ) {\n      event.target.focus()\n    }\n    // to simplify testing components that use downshift, we'll not wrap this in a setTimeout\n    // if the NODE_ENV is test. With the proper build system, this should be dead code eliminated\n    // when building for production and should therefore have no impact on production code.\n    if (process.env.NODE_ENV === 'test') {\n      this.toggleMenu({type: stateChangeTypes.clickButton})\n    } else {\n      // Ensure that toggle of menu occurs after the potential blur event in iOS\n      this.internalSetTimeout(() =>\n        this.toggleMenu({type: stateChangeTypes.clickButton}),\n      )\n    }\n  }\n\n  button_handleBlur = event => {\n    const blurTarget = event.target // Save blur target for comparison with activeElement later\n    // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not body element\n    this.internalSetTimeout(() => {\n      if (\n        !this.isMouseDown &&\n        (this.props.environment.document.activeElement == null ||\n          this.props.environment.document.activeElement.id !== this.inputId) &&\n        this.props.environment.document.activeElement !== blurTarget // Do nothing if we refocus the same element again (to solve issue in Safari on iOS)\n      ) {\n        this.reset({type: stateChangeTypes.blurButton})\n      }\n    })\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ BUTTON\n\n  /////////////////////////////// LABEL\n\n  getLabelProps = props => {\n    return {htmlFor: this.inputId, id: this.labelId, ...props}\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ LABEL\n\n  /////////////////////////////// INPUT\n\n  getInputProps = ({\n    onKeyDown,\n    onBlur,\n    onChange,\n    onInput,\n    onChangeText,\n    ...rest\n  } = {}) => {\n    let onChangeKey\n    let eventHandlers = {}\n\n    /* istanbul ignore next (preact) */\n    if (isPreact) {\n      onChangeKey = 'onInput'\n    } else {\n      onChangeKey = 'onChange'\n    }\n    const {inputValue, isOpen, highlightedIndex} = this.getState()\n\n    if (!rest.disabled) {\n      eventHandlers = {\n        [onChangeKey]: callAllEventHandlers(\n          onChange,\n          onInput,\n          this.input_handleChange,\n        ),\n        onKeyDown: callAllEventHandlers(onKeyDown, this.input_handleKeyDown),\n        onBlur: callAllEventHandlers(onBlur, this.input_handleBlur),\n      }\n    }\n\n    /* istanbul ignore if (react-native) */\n    if (isReactNative) {\n      eventHandlers = {\n        onChange: callAllEventHandlers(\n          onChange,\n          onInput,\n          this.input_handleChange,\n        ),\n        onChangeText: callAllEventHandlers(\n          onChangeText,\n          onInput,\n          this.input_handleTextChange,\n        ),\n        onBlur: callAllEventHandlers(onBlur, this.input_handleBlur),\n      }\n    }\n\n    return {\n      'aria-autocomplete': 'list',\n      'aria-activedescendant':\n        isOpen && typeof highlightedIndex === 'number' && highlightedIndex >= 0\n          ? this.getItemId(highlightedIndex)\n          : null,\n      'aria-controls': isOpen ? this.menuId : null,\n      'aria-labelledby': this.labelId,\n      // https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion\n      // revert back since autocomplete=\"nope\" is ignored on latest Chrome and Opera\n      autoComplete: 'off',\n      value: inputValue,\n      id: this.inputId,\n      ...eventHandlers,\n      ...rest,\n    }\n  }\n\n  input_handleKeyDown = event => {\n    const key = normalizeArrowKey(event)\n    if (key && this.keyDownHandlers[key]) {\n      this.keyDownHandlers[key].call(this, event)\n    }\n  }\n\n  input_handleChange = event => {\n    this.internalSetState({\n      type: stateChangeTypes.changeInput,\n      isOpen: true,\n      inputValue: isReactNative\n        ? /* istanbul ignore next (react-native) */ event.nativeEvent.text\n        : event.target.value,\n    })\n  }\n\n  input_handleTextChange /* istanbul ignore next (react-native) */ = text => {\n    this.internalSetState({\n      type: stateChangeTypes.changeInput,\n      isOpen: true,\n      inputValue: text,\n    })\n  }\n\n  input_handleBlur = () => {\n    // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not the body element\n    this.internalSetTimeout(() => {\n      const downshiftButtonIsActive =\n        this.props.environment.document &&\n        this.props.environment.document.activeElement.dataset.toggle &&\n        (this._rootNode &&\n          this._rootNode.contains(\n            this.props.environment.document.activeElement,\n          ))\n      if (!this.isMouseDown && !downshiftButtonIsActive) {\n        this.reset({type: stateChangeTypes.blurInput})\n      }\n    })\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ INPUT\n\n  /////////////////////////////// MENU\n\n  menuRef = node => {\n    this._menuNode = node\n  }\n\n  getMenuProps = (\n    {refKey = 'ref', ref, ...props} = {},\n    {suppressRefError = false} = {},\n  ) => {\n    this.getMenuProps.called = true\n    this.getMenuProps.refKey = refKey\n    this.getMenuProps.suppressRefError = suppressRefError\n\n    return {\n      [refKey]: callAll(ref, this.menuRef),\n      role: 'listbox',\n      'aria-labelledby': props && props['aria-label'] ? null : this.labelId,\n      id: this.menuId,\n      ...props,\n    }\n  }\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ MENU\n\n  /////////////////////////////// ITEM\n  getItemProps = ({\n    onMouseMove,\n    onMouseDown,\n    onClick,\n    onPress,\n    index,\n    item = process.env.NODE_ENV === 'production'\n      ? /* istanbul ignore next */ undefined\n      : requiredProp('getItemProps', 'item'),\n    ...rest\n  } = {}) => {\n    if (index === undefined) {\n      this.items.push(item)\n      index = this.items.indexOf(item)\n    } else {\n      this.items[index] = item\n    }\n\n    const onSelectKey = isReactNative\n      ? /* istanbul ignore next (react-native) */ 'onPress'\n      : 'onClick'\n    const customClickHandler = isReactNative\n      ? /* istanbul ignore next (react-native) */ onPress\n      : onClick\n\n    const enabledEventHandlers = {\n      // onMouseMove is used over onMouseEnter here. onMouseMove\n      // is only triggered on actual mouse movement while onMouseEnter\n      // can fire on DOM changes, interrupting keyboard navigation\n      onMouseMove: callAllEventHandlers(onMouseMove, () => {\n        if (index === this.getState().highlightedIndex) {\n          return\n        }\n        this.setHighlightedIndex(index, {\n          type: stateChangeTypes.itemMouseEnter,\n        })\n\n        // We never want to manually scroll when changing state based\n        // on `onMouseMove` because we will be moving the element out\n        // from under the user which is currently scrolling/moving the\n        // cursor\n        this.avoidScrolling = true\n        this.internalSetTimeout(() => (this.avoidScrolling = false), 250)\n      }),\n      onMouseDown: callAllEventHandlers(onMouseDown, event => {\n        // This prevents the activeElement from being changed\n        // to the item so it can remain with the current activeElement\n        // which is a more common use case.\n        event.preventDefault()\n      }),\n      [onSelectKey]: callAllEventHandlers(customClickHandler, () => {\n        this.selectItemAtIndex(index, {\n          type: stateChangeTypes.clickItem,\n        })\n      }),\n    }\n\n    // Passing down the onMouseDown handler to prevent redirect\n    // of the activeElement if clicking on disabled items\n    const eventHandlers = rest.disabled\n      ? {onMouseDown: enabledEventHandlers.onMouseDown}\n      : enabledEventHandlers\n\n    return {\n      id: this.getItemId(index),\n      role: 'option',\n      'aria-selected': this.getState().selectedItem === item,\n      ...eventHandlers,\n      ...rest,\n    }\n  }\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ITEM\n\n  clearItems = () => {\n    this.items = []\n  }\n\n  reset = (otherStateToSet = {}, cb) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState(\n      ({selectedItem}) => ({\n        isOpen: false,\n        highlightedIndex: this.props.defaultHighlightedIndex,\n        inputValue: this.props.itemToString(selectedItem),\n        ...otherStateToSet,\n      }),\n      cb,\n    )\n  }\n\n  toggleMenu = (otherStateToSet = {}, cb) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState(\n      ({isOpen}) => {\n        return {isOpen: !isOpen, ...otherStateToSet}\n      },\n      () => {\n        const {isOpen} = this.getState()\n        if (isOpen) {\n          // highlight default index\n          this.setHighlightedIndex(undefined, otherStateToSet)\n        }\n        cbToCb(cb)()\n      },\n    )\n  }\n\n  openMenu = cb => {\n    this.internalSetState({isOpen: true}, cb)\n  }\n\n  closeMenu = cb => {\n    this.internalSetState({isOpen: false}, cb)\n  }\n\n  updateStatus = debounce(() => {\n    const state = this.getState()\n    const item = this.items[state.highlightedIndex]\n    const resultCount = this.getItemCount()\n    const status = this.props.getA11yStatusMessage({\n      itemToString: this.props.itemToString,\n      previousResultCount: this.previousResultCount,\n      resultCount,\n      highlightedItem: item,\n      ...state,\n    })\n    this.previousResultCount = resultCount\n\n    setA11yStatus(status)\n  }, 200)\n\n  componentDidMount() {\n    /* istanbul ignore if (react-native) */\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      !isReactNative &&\n      this.getMenuProps.called &&\n      !this.getMenuProps.suppressRefError\n    ) {\n      validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps)\n    }\n\n    /* istanbul ignore if (react-native) */\n    if (isReactNative) {\n      this.cleanup = () => {\n        this.internalClearTimeouts()\n      }\n    } else {\n      const targetWithinDownshift = (target, checkActiveElement = true) => {\n        const {document} = this.props.environment\n        return [this._rootNode, this._menuNode].some(\n          contextNode =>\n            contextNode &&\n            (isOrContainsNode(contextNode, target) ||\n              (checkActiveElement &&\n                isOrContainsNode(contextNode, document.activeElement))),\n        )\n      }\n      // this.isMouseDown helps us track whether the mouse is currently held down.\n      // This is useful when the user clicks on an item in the list, but holds the mouse\n      // down long enough for the list to disappear (because the blur event fires on the input)\n      // this.isMouseDown is used in the blur handler on the input to determine whether the blur event should\n      // trigger hiding the menu.\n      const onMouseDown = () => {\n        this.isMouseDown = true\n      }\n      const onMouseUp = event => {\n        this.isMouseDown = false\n        // if the target element or the activeElement is within a downshift node\n        // then we don't want to reset downshift\n        const contextWithinDownshift = targetWithinDownshift(event.target)\n        if (!contextWithinDownshift && this.getState().isOpen) {\n          this.reset({type: stateChangeTypes.mouseUp}, () =>\n            this.props.onOuterClick(this.getStateAndHelpers()),\n          )\n        }\n      }\n      // Touching an element in iOS gives focus and hover states, but touching out of\n      // the element will remove hover, and persist the focus state, resulting in the\n      // blur event not being triggered.\n      const onTouchStart = event => {\n        const contextWithinDownshift = targetWithinDownshift(\n          event.target,\n          false,\n        )\n        if (!contextWithinDownshift && this.getState().isOpen) {\n          this.reset({type: stateChangeTypes.touchStart}, () =>\n            this.props.onOuterClick(this.getStateAndHelpers()),\n          )\n        }\n      }\n\n      this.props.environment.addEventListener('mousedown', onMouseDown)\n      this.props.environment.addEventListener('mouseup', onMouseUp)\n      this.props.environment.addEventListener('touchstart', onTouchStart)\n\n      this.cleanup = () => {\n        this.internalClearTimeouts()\n        this.updateStatus.cancel()\n        this.props.environment.removeEventListener('mousedown', onMouseDown)\n        this.props.environment.removeEventListener('mouseup', onMouseUp)\n        this.props.environment.removeEventListener('touchstart', onTouchStart)\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (process.env.NODE_ENV !== 'production') {\n      validateControlledUnchanged(prevProps, this.props)\n      /* istanbul ignore if (react-native) */\n      if (\n        !isReactNative &&\n        this.getMenuProps.called &&\n        !this.getMenuProps.suppressRefError\n      ) {\n        validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps)\n      }\n    }\n\n    if (\n      this.isControlledProp('selectedItem') &&\n      this.props.selectedItemChanged(\n        prevProps.selectedItem,\n        this.props.selectedItem,\n      )\n    ) {\n      this.internalSetState({\n        type: stateChangeTypes.controlledPropUpdatedSelectedItem,\n        inputValue: this.props.itemToString(this.props.selectedItem),\n      })\n    }\n\n    const current =\n      this.props.highlightedIndex === undefined ? this.state : this.props\n    const prev =\n      prevProps.highlightedIndex === undefined ? prevState : prevProps\n\n    if (\n      current.highlightedIndex !== prev.highlightedIndex &&\n      !this.avoidScrolling\n    ) {\n      this.scrollHighlightedItemIntoView()\n    }\n\n    /* istanbul ignore else (react-native) */\n    if (!isReactNative) {\n      this.updateStatus()\n    }\n  }\n\n  componentWillUnmount() {\n    this.cleanup() // avoids memory leak\n  }\n\n  render() {\n    const children = unwrapArray(this.props.children, noop)\n    // because the items are rerendered every time we call the children\n    // we clear this out each render and it will be populated again as\n    // getItemProps is called.\n    this.clearItems()\n    // we reset this so we know whether the user calls getRootProps during\n    // this render. If they do then we don't need to do anything,\n    // if they don't then we need to clone the element they return and\n    // apply the props for them.\n    this.getRootProps.called = false\n    this.getRootProps.refKey = undefined\n    this.getRootProps.suppressRefError = undefined\n    // we do something similar for getMenuProps\n    this.getMenuProps.called = false\n    this.getMenuProps.refKey = undefined\n    this.getMenuProps.suppressRefError = undefined\n    // we do something similar for getLabelProps\n    this.getLabelProps.called = false\n    // and something similar for getInputProps\n    this.getInputProps.called = false\n    const element = unwrapArray(children(this.getStateAndHelpers()))\n    if (!element) {\n      return null\n    }\n\n    if (this.getRootProps.called || this.props.suppressRefError) {\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        !this.getRootProps.suppressRefError &&\n        !this.props.suppressRefError\n      ) {\n        validateGetRootPropsCalledCorrectly(element, this.getRootProps)\n      }\n      return element\n    } else if (isDOMElement(element)) {\n      // they didn't apply the root props, but we can clone\n      // this and apply the props ourselves\n      return React.cloneElement(\n        element,\n        this.getRootProps(getElementProps(element)),\n      )\n    }\n\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      // they didn't apply the root props, but they need to\n      // otherwise we can't query around the autocomplete\n\n      throw new Error(\n        'downshift: If you return a non-DOM element, you must use apply the getRootProps function',\n      )\n    }\n\n    /* istanbul ignore next */\n    return undefined\n  }\n}\n\nexport default Downshift\n\nfunction validateGetMenuPropsCalledCorrectly(node, {refKey}) {\n  if (!node) {\n    // eslint-disable-next-line no-console\n    console.error(\n      `downshift: The ref prop \"${refKey}\" from getMenuProps was not applied correctly on your menu element.`,\n    )\n  }\n}\n\nfunction validateGetRootPropsCalledCorrectly(element, {refKey}) {\n  const refKeySpecified = refKey !== 'ref'\n  const isComposite = !isDOMElement(element)\n  if (isComposite && !refKeySpecified) {\n    // eslint-disable-next-line no-console\n    console.error(\n      'downshift: You returned a non-DOM element. You must specify a refKey in getRootProps',\n    )\n  } else if (!isComposite && refKeySpecified) {\n    // eslint-disable-next-line no-console\n    console.error(\n      `downshift: You returned a DOM element. You should not specify a refKey in getRootProps. You specified \"${refKey}\"`,\n    )\n  }\n  if (!getElementProps(element)[refKey]) {\n    // eslint-disable-next-line no-console\n    console.error(\n      `downshift: You must apply the ref prop \"${refKey}\" from getRootProps onto your root element.`,\n    )\n  }\n}\n\nfunction validateControlledUnchanged(prevProps, nextProps) {\n  const warningDescription = `This prop should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled Downshift element for the lifetime of the component. More info: https://github.com/paypal/downshift#control-props`\n  ;['selectedItem', 'isOpen', 'inputValue', 'highlightedIndex'].forEach(\n    propKey => {\n      if (\n        prevProps[propKey] !== undefined &&\n        nextProps[propKey] === undefined\n      ) {\n        // eslint-disable-next-line no-console\n        console.error(\n          `downshift: A component has changed the controlled prop \"${propKey}\" to be uncontrolled. ${warningDescription}`,\n        )\n      } else if (\n        prevProps[propKey] === undefined &&\n        nextProps[propKey] !== undefined\n      ) {\n        // eslint-disable-next-line no-console\n        console.error(\n          `downshift: A component has changed the uncontrolled prop \"${propKey}\" to be controlled. ${warningDescription}`,\n        )\n      }\n    },\n  )\n}\n"],"names":["statusDiv","document","getElementById","statuses","setStatus","status","isSameAsLast","length","div","createElement","setAttribute","Object","assign","style","border","clip","height","margin","overflow","padding","position","width","body","appendChild","getStatusDiv","lastChild","removeChild","firstChild","filter","Boolean","forEach","statusItem","index","display","childDiv","textContent","getStatusChildDiv","unknown","itemMouseEnter","keyDownArrowUp","keyDownArrowDown","keyDownEscape","keyDownEnter","clickItem","blurInput","changeInput","keyDownSpaceButton","clickButton","blurButton","isElement","el","nodeType","canOverflow","skipOverflowHiddenElements","isScrollable","clientHeight","scrollHeight","clientWidth","scrollWidth","getComputedStyle","overflowY","overflowX","alignNearest","scrollingEdgeStart","scrollingEdgeEnd","scrollingSize","scrollingBorderStart","scrollingBorderEnd","elementEdgeStart","elementEdgeEnd","elementSize","target","options","scrollMode","block","inline","boundary","checkBoundary","node","TypeError","scrollingElement","documentElement","frames","cursor","parentNode","push","viewportWidth","window","visualViewport","innerWidth","viewportHeight","innerHeight","viewportX","scrollX","pageXOffset","viewportY","scrollY","pageYOffset","_target$getBoundingCl","getBoundingClientRect","targetHeight","targetWidth","targetTop","top","targetRight","right","targetBottom","bottom","targetLeft","left","targetBlock","targetInline","computations","frame","_frame$getBoundingCli","_height","_width","_top","_left","frameStyle","borderLeft","parseInt","borderLeftWidth","borderTop","borderTopWidth","borderRight","borderRightWidth","borderBottom","borderBottomWidth","blockScroll","inlineScroll","scrollbarWidth","offsetWidth","scrollbarHeight","offsetHeight","Math","max","scrollLeft","scrollTop","min","idCounter","cbToCb","cb","noop","isOrContainsNode","parent","child","contains","callAllEventHandlers","fns","event","args","some","fn","preventDownshiftDefault","hasOwnProperty","nativeEvent","unwrapArray","arg","defaultValue","Array","isArray","stateKeys","pickState","state","result","k","normalizeArrowKey","key","keyCode","indexOf","Downshift","props","_Component","id","_this","String","menuId","labelId","inputId","getItemId","input","items","itemCount","previousResultCount","timeoutIds","internalSetTimeout","time","setTimeout","i","setItemCount","count","unsetItemCount","setHighlightedIndex","highlightedIndex","otherStateToSet","defaultHighlightedIndex","internalSetState","clearSelection","selectedItem","inputValue","isOpen","selectItem","item","isControlledProp","defaultInputValue","itemToString","selectItemAtIndex","itemIndex","selectHighlightedItem","getState","stateToSet","isItemSelected","onChangeArg","onStateChangeArg","isStateToSetFunction","onInputValueChange","getStateAndHelpers","setState","newStateToSet","stateReducer","nextState","nextFullState","type","stateChangeTypes","keys","onStateChange","onSelect","undefined","onChange","onUserAction","rootRef","_rootNode","getRootProps","refKey","rest","suppressRefError","called","role","keyDownHandlers","ArrowDown","preventDefault","amount","shiftKey","moveHighlightedIndex","ArrowUp","Enter","this","itemNode","getItemNodeFromIndex","hasAttribute","Escape","reset","buttonKeyDownHandlers","toggleMenu","getToggleButtonProps","onClick","onKeyDown","onPress","onKeyUp","onBlur","enabledEventHandlers","button_handleClick","button_handleKeyDown","button_handleKeyUp","button_handleBlur","disabled","call","environment","activeElement","focus","blurTarget","isMouseDown","getLabelProps","htmlFor","getInputProps","onInput","onChangeText","eventHandlers","input_handleChange","input_handleKeyDown","input_handleBlur","autoComplete","value","input_handleTextChange","text","downshiftButtonIsActive","dataset","toggle","menuRef","_menuNode","getMenuProps","ref","callAll","getItemProps","onMouseMove","onMouseDown","customClickHandler","avoidScrolling","clearItems","openMenu","closeMenu","updateStatus","timeoutId","cancel","clearTimeout","wrapper","debounce","resultCount","getItemCount","getA11yStatusMessage","highlightedItem","setA11yStatus","defaultIsOpen","defaultSelectedItem","internalClearTimeouts","stateToMerge","reduce","_this2","scrollHighlightedItemIntoView","scrollIntoView","changeHighlightedIndex","moveAmount","itemsLastIndex","baseIndex","newIndex","componentDidMount","targetWithinDownshift","checkActiveElement","_this3","contextNode","onMouseUp","onOuterClick","onTouchStart","addEventListener","cleanup","removeEventListener","componentDidUpdate","prevProps","prevState","selectedItemChanged","current","prev","componentWillUnmount","render","children","element","nodeName","isDOMElement","React","cloneElement","attributes","getElementProps","Component","defaultProps","prevItem","rootNode","computeScrollIntoView"],"mappings":"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"}